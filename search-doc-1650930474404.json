[{"title":"Demonstration","type":0,"sectionRef":"#","url":"docs/Demonstration","content":"","keywords":""},{"title":"Functional‚Äã","type":1,"pageTitle":"Demonstration","url":"docs/Demonstration#functional","content":"Other popular Lua implementations1 of immutable data structures typically offer this functional approach: local oldList = { &quot;a&quot;, &quot;b&quot;, &quot;c&quot; } local newList = Freeze.List.set(oldList, 1, &quot;value&quot;) Copy This comes with a few benefits, such as knowing we will always get a Luau table type as a result. "},{"title":"Class‚Äã","type":1,"pageTitle":"Demonstration","url":"docs/Demonstration#class","content":"Freeze also offers a class-based approach to writing immutable data structures.2 local oldList = Freeze.List({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }) local newList = oldList.set(1, &quot;value&quot;).toLuau() Copy This makes it easy to chain together operations to create a new data structure. local oldList = Freeze.List({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }) local newList = oldList.map(string.upper).reverse().remove(1) -- List( &quot;C&quot;, &quot;B&quot;, &quot;A&quot; ) Copy This does come with a caveat. Most Luau code written may expect a Luau table data type without any class decorations. If your code is expecting a Luau table data type, be sure to convert your result via toLuau. local luauTable: { string } = newList.toLuau() Copy "},{"title":"API Reference‚Äã","type":1,"pageTitle":"Demonstration","url":"docs/Demonstration#api-reference","content":"Check out the API Reference to see what else Freeze is capable of! Such as Llama.‚Ü©Immutable.js was a heavy inspiration.‚Ü© "},{"title":"How does immutability help?","type":0,"sectionRef":"#","url":"docs/WhyImmutable","content":"How does immutability help? üèóÔ∏è Under construction In the meantime, take a look at what these other authors have to say: LlamaImmutable.js","keywords":""},{"title":"Freeze","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Prior art‚Äã","type":1,"pageTitle":"Freeze","url":"docs/intro#prior-art","content":"Freeze is takes inspiration from: Llama by freddylistImmutable.js "},{"title":"Freeze","type":0,"sectionRef":"#","url":"api/Freeze","content":"","keywords":""},{"title":"Properties‚Äã","type":1,"pageTitle":"Freeze","url":"api/Freeze#properties","content":" "},{"title":"List‚Äã","type":1,"pageTitle":"Freeze","url":"api/Freeze#List","content":"&lt;/&gt; Freeze.List: List Lists are ordered tables with numeric indices.  "},{"title":"Map‚Äã","type":1,"pageTitle":"Freeze","url":"api/Freeze#Map","content":"&lt;/&gt; Freeze.Map: Map Alias Dictionary Maps are unordered tables with key-value pairs.  "},{"title":"None‚Äã","type":1,"pageTitle":"Freeze","url":"api/Freeze#None","content":"&lt;/&gt; Freeze.None: None Since lua tables cannot distinguish between values not being present and a value of nil,Freeze.None exists to represent values that should be interpreted as nil. This is useful when removing values with functions such as Freeze.Map.merge. "},{"title":"Migrating From Llama","type":0,"sectionRef":"#","url":"docs/MigratingFromLlama","content":"","keywords":""},{"title":"Llama‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#llama","content":""},{"title":".equalObjects‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#equalobjects","content":"Not implemented. See Freeze's equals instead. "},{"title":".isEmpty‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#isempty","content":"Not implemented.Use Freeze.Map.isEmpty or Freeze.List.isEmpty instead. "},{"title":".Dictionary‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#dictionary","content":""},{"title":".copy‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#copy","content":"Not implemented. Use table.clone instead. "},{"title":".copyDeep‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#copydeep","content":"Not implemented. Reconsider if you really need this. "},{"title":".equals‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#equals","content":"Freeze.Map.equals will perform value-equality instead of reference-equalityFreeze.Map.equals only accepts two objects to compare between instead of varags argumentsFreeze.Map.equals will treat nil and void as values, where Freeze.Map.equals would ignore these arguments "},{"title":".equalsDeep‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#equalsdeep","content":"Not implemented. "},{"title":".fromLists‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#fromlists","content":"Not implemented.Consider Freeze.Map.of instead. "},{"title":".mergeDeep‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#mergedeep","content":"Not implemented. "},{"title":".removeKeys‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#removekeys","content":"Not implemented.Consider Freeze.Map.filter instead. "},{"title":".removeValues‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#removevalues","content":"Not implemented.Consider Freeze.Map.filter instead. "},{"title":".update‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#update","content":"Freeze.Map.update requires an updater function while Llama's was optional.Freeze.Map.update's updater signature is (Value) -&gt; (Value) instead of Llama's (Value, Key) -&gt; (Value).Freeze.Map.update final argument is notSetValue instead of a callback function. -- Freeze Freeze.Map.update(dictionary, key, function(value) return string.upper(value) end, &quot;default value&quot;) -- Llama Llama.Dictionary.update(dictionary, key, function(value, key) return string.upper(value) end, function(key) return &quot;default value&quot; end) Copy "},{"title":"List‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#list","content":""},{"title":".concatDeep‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#concatdeep","content":"Not implemented. "},{"title":".copy‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#copy-1","content":"Not implemented. Consider table.clone instead. "},{"title":".copyDeep‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#copydeep-1","content":"Not implemented. Reconsider if you really need this. "},{"title":".create‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#create","content":"Not implemented. Consider table.create instead. "},{"title":".equals‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#equals-1","content":"Freeze.List.equals will perform value-equality instead of reference-equalityFreeze.List.equals only accepts two objects to compare between instead of varags argumentsFreeze.List.equals will treat nil and void as values, where Freeze.List.equals would ignore these arguments "},{"title":".equalsDeep‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#equalsdeep-1","content":"Not implemented. "},{"title":".find‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#find","content":"Freeze.List.find accepts a predicate instead of a value.Consider table.find if you want to use a static value. -- Freeze Freeze.List.find(list, function(value) return value == &quot;foo&quot; end) -- Llama Llama.List.find(list, &quot;foo&quot;) Copy "},{"title":".findLast‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#findlast","content":"Freeze.List.findLast accepts a predicate instead of a value. -- Freeze Freeze.List.findLast(list, function(value) return value == &quot;foo&quot; end) -- Llama Llama.List.findLast(list, &quot;foo&quot;) Copy "},{"title":".findWhere‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#findwhere","content":"Not implemented.Equivalent to Freeze.List.find. "},{"title":".findWhereLast‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#findwherelast","content":"Not implemented.Equivalent to Freeze.List.findLast. "},{"title":".insert‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#insert","content":"Allows index to be out of bounds. Will not throw. "},{"title":".join‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#join","content":"Is no longer an alias for List.concat. Replace Llama.List.join with Freeze.List.concat.Is an alias of Freeze.List.merge instead. "},{"title":".removeIndices‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#removeindices","content":"Not implemented.Consider Freeze.List.filter instead. "},{"title":".removeValues‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#removevalues-1","content":"Not implemented.Consider Freeze.List.filter instead. "},{"title":".set‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#set","content":"Allows index to be out of bounds. Will not throw. "},{"title":".slice‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#slice","content":"Allows index to be out of bounds. Will not throw.Using a negative number will slice from the end of the list. "},{"title":".splice‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#splice","content":"Not implemented. "},{"title":".toSet‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#toset","content":"Not implemented. "},{"title":".update‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#update-1","content":"Freeze.List.update requires an updater function while Llama's was optional.Freeze.List.update's updater signature is (Value) -&gt; (Value) instead of Llama's (Value, Key) -&gt; (Value).Freeze.List.update final argument is notSetValue instead of a callback function. -- Freeze Freeze.List.update(list, key, function(value) return string.upper(value) end, &quot;default value&quot;) -- Llama Llama.List.update(list, key, function(value, key) return string.upper(value) end, function(key) return &quot;default value&quot; end) Copy "},{"title":".zipAll‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#zipall","content":"Not implemented. "},{"title":"Set‚Äã","type":1,"pageTitle":"Migrating From Llama","url":"docs/MigratingFromLlama#set-1","content":"Not implemented. "},{"title":"Map","type":0,"sectionRef":"#","url":"api/Map","content":"","keywords":""},{"title":"Functions‚Äã","type":1,"pageTitle":"Map","url":"api/Map#functions","content":" "},{"title":"count‚Äã","type":1,"pageTitle":"Map","url":"api/Map#count","content":"&lt;/&gt; Map.count(predicate:¬†(( Value, Key )¬†‚Üí¬†(boolean))?) ‚Üí¬†number Returns the number of entries that match the predicate. If the predicate is not given, all entries will be considered a match. Map.new({ a = 1, b = 2, c = 3 }).count() -- 3 Map.new({ a = 1, b = 2, c = 3 }).count(function(value, _key) return value % 2 == 0 end) -- 1   "},{"title":"deleteAll‚Äã","type":1,"pageTitle":"Map","url":"api/Map#deleteAll","content":"&lt;/&gt; Map.deleteAll(keys:¬†...{Key}) ‚Üí¬†Map Returns a new Map which excludes the provided keys. Alias removeAll Map.new({ a = 1, b = 2, c = 3 }).removeAll({ &quot;a&quot;, &quot;c&quot; }) -- Map( &quot;b&quot; = 2 )   "},{"title":"emptyMap‚Äã","type":1,"pageTitle":"Map","url":"api/Map#emptyMap","content":"&lt;/&gt; Map.emptyMap() ‚Üí¬†Map Returns an empty Map. Map.emptyMap() -- Map( )   "},{"title":"equals‚Äã","type":1,"pageTitle":"Map","url":"api/Map#equals","content":"&lt;/&gt; Map.equals(other:¬†any) ‚Üí¬†Map Returns true if both collections have value equality. local map1 = List.new({ a = 1, b = 2, c = 3 }) local map1 = List.new({ a = 1, b = 2, c = 3 }) map1.equals(map1) -- true   "},{"title":"every‚Äã","type":1,"pageTitle":"Map","url":"api/Map#every","content":"&lt;/&gt; Map.every(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Map Returns true if predicate returns true for all entries in the Iterable. Map.new({ a = 1, b = 2, c = 3 }).every(function(value, key) return value &lt; 10 end) -- true   "},{"title":"filter‚Äã","type":1,"pageTitle":"Map","url":"api/Map#filter","content":"&lt;/&gt; Map.filter(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Map Returns a new Map of only entries for which the predicate function returns true. Map.new({ a = 1, b = 2, c = 3, d = 4 }).filter(function(value, key) return value % 2 == 0 end) -- Map( b = 2, d = 4 )   "},{"title":"filterNot‚Äã","type":1,"pageTitle":"Map","url":"api/Map#filterNot","content":"&lt;/&gt; Map.filterNot(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Map Returns a new Map of only entries for which the predicate function returns false. Map.new({ a = 1, b = 2, c = 3, d = 4 }).filterNot(function(value, key) return value % 2 == 0 end) -- Map( a = 1, c = 3 )   "},{"title":"find‚Äã","type":1,"pageTitle":"Map","url":"api/Map#find","content":"&lt;/&gt; Map.find(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Value Returns the first value for which the predicate returns true. Map.new({ a = 1, b = 2, c = 3 }).find(function(value, key) return value % 2 == 0 end) -- 2   "},{"title":"findEntry‚Äã","type":1,"pageTitle":"Map","url":"api/Map#findEntry","content":"&lt;/&gt; Map.findEntry(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†{ Key, Value } Returns the first [key, value] entry for which the predicate returns true. Map.new({ a = 1, b = 2 c = 3, d = 4 }).find(function(value, key) return value % 2 == 0 end) -- { &quot;b&quot;, 2 }   "},{"title":"findKey‚Äã","type":1,"pageTitle":"Map","url":"api/Map#findKey","content":"&lt;/&gt; Map.findKey(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Key Returns the first key for which the predicate returns true. Map.new({ a = 1, b = 2, c = 3 }).find(function(value, key) return value % 2 == 0 end) -- &quot;b&quot;   "},{"title":"flatten‚Äã","type":1,"pageTitle":"Map","url":"api/Map#flatten","content":"&lt;/&gt; Map.flatten(depth:¬†number?) ‚Üí¬†Map Returns a flattened map. Map.new({ foo = 1, foobar = { bar = 2, baz = { etc = 3, }, }, }).flatten() -- Map( foo = 1, bar = 2, etc = 3 )   "},{"title":"flip‚Äã","type":1,"pageTitle":"Map","url":"api/Map#flip","content":"&lt;/&gt; Map.flip() ‚Üí¬†Map Returns a new map where keys and values are flipped. Map.new({ a = &quot;x&quot;, b = &quot;y&quot;, c = &quot;z&quot; ).flip() -- Map( x = &quot;a&quot;, y = &quot;b&quot;, z = &quot;c&quot; )   "},{"title":"forEach‚Äã","type":1,"pageTitle":"Map","url":"api/Map#forEach","content":"&lt;/&gt; Map.forEach(sideEffect:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†number While the Map is iterated, the sideEffect is executed for every entry. If any call of the sideEffect returns false, the iteration will stop. Returns the number of entries iterated (including the last iteration which returned false). Map.new({ a = 10, b = 20, c = -10, d = 30 }).forEach(function(value, _key) return value &gt; 0 end) -- 3   "},{"title":"get‚Äã","type":1,"pageTitle":"Map","url":"api/Map#get","content":"&lt;/&gt; Map.get( key:¬†Key, notSetValue:¬†Value ) ‚Üí¬†Value? Returns the value at the given key, otherwise returns notSetValue if the given value is not found. Map.new({ a = 1, b = 2, c = 3 }).get(&quot;a&quot;, &quot;default&quot;) -- 1 Map.new({ a = 1, b = 2, c = 3 }).get(&quot;foobar&quot;, &quot;default&quot;) -- &quot;default&quot;   "},{"title":"getIn‚Äã","type":1,"pageTitle":"Map","url":"api/Map#getIn","content":"&lt;/&gt; Map.getIn( keyPath:¬†{any}, notSetValue:¬†Value ) ‚Üí¬†Value? Returns the value if found by following a path of keys, otherwise returns notSetValue if the given value is nil. Map.new({ a = { b = &quot;c&quot; }, x = { y = &quot;z&quot; }, }).getIn({ &quot;a&quot;, &quot;b&quot; }, &quot;default&quot;) -- &quot;c&quot;   "},{"title":"has‚Äã","type":1,"pageTitle":"Map","url":"api/Map#has","content":"&lt;/&gt; Map.has(key:¬†Key) ‚Üí¬†boolean Returns true if the key exists within the Map. Map.new({ a = 1, b = 2, c = 3 }).has(&quot;b&quot;) -- true   "},{"title":"hasIn‚Äã","type":1,"pageTitle":"Map","url":"api/Map#hasIn","content":"&lt;/&gt; Map.hasIn(keyPath:¬†{any}) ‚Üí¬†boolean Returns true if the value is found by following a path of keys. Map.new({ a = { b = &quot;c&quot; }, x = { y = &quot;z&quot; }, }).hasIn({ &quot;a&quot;, &quot;b&quot; }) -- true   "},{"title":"includes‚Äã","type":1,"pageTitle":"Map","url":"api/Map#includes","content":"&lt;/&gt; Map.includes(value:¬†any) ‚Üí¬†boolean Returns true if the value is found within the Map. Map.new({ a = 1, b = 2, c = 3 }).includes(2) -- true   "},{"title":"isEmpty‚Äã","type":1,"pageTitle":"Map","url":"api/Map#isEmpty","content":"&lt;/&gt; Map.isEmpty() ‚Üí¬†boolean Returns true if the map is empty. Map.new({}).isEmpty() -- true   "},{"title":"joinAsString‚Äã","type":1,"pageTitle":"Map","url":"api/Map#joinAsString","content":"&lt;/&gt; Map.joinAsString() ‚Üí¬†string Joins values together as a string, inserting a separator between each. The default separator is &quot;,&quot;. Map.new({ a = 1, b = 2, c = 3 }).joinAsString(&quot;, &quot;) -- &quot;a=1, b=2, c=3&quot;   "},{"title":"keys‚Äã","type":1,"pageTitle":"Map","url":"api/Map#keys","content":"&lt;/&gt; Map.keys() ‚Üí¬†Map Returns a list of keys. Map.new({ a = 1, b = 2, c = 3 }).keys() -- Map( &quot;a&quot;, &quot;b&quot;, &quot;c&quot; )   "},{"title":"new‚Äã","type":1,"pageTitle":"Map","url":"api/Map#new","content":"&lt;/&gt; Map.new(collection:¬†{any}?) ‚Üí¬†Map Constructs a new Map object with the given table. Has a callable shorthand variant: local myMap1 = Map.new({ a = 1, b = 2, c = 3 }) local myMap2 = Map({ a = 1, b = 2, c = 3 })  "},{"title":"Errors","type":1,"pageTitle":"Map","url":"api/Map##","content":"Type\tDescription&quot;Map: Expected table&quot;\tRaised when given an invalid argument for collection. Make sure you only provide tables or nil.  "},{"title":"toLuau‚Äã","type":1,"pageTitle":"Map","url":"api/Map#toLuau","content":"&lt;/&gt; Map.toLuau() ‚Üí¬†{Key:¬†Value} Returns a show Luau table representation of the List. Map({ a = 1, b = 2, c = 3 }).toLuau() -- { 1, 2, 3 }   "},{"title":"toArray‚Äã","type":1,"pageTitle":"Map","url":"api/Map#toArray","content":"&lt;/&gt; Map.toArray() ‚Üí¬†{Value} Returns a shallow Luau table representation of the Map, coercing it to an array. Map({ a = 1, b = 2, c= 3 }).toArray() -- { }   "},{"title":"mapEntries‚Äã","type":1,"pageTitle":"Map","url":"api/Map#mapEntries","content":"&lt;/&gt; Map.mapEntries(mapper:¬†({ Value, Key })¬†‚Üí¬†({ Value, Key }?)) ‚Üí¬†Map Returns a new Map with entries ({key, value}) passed through a mapper function. If mapper returns nil, then the entry will be filtered. Map.new({ a = 1, b = 2, c = 3 }).mapEntries(function(entry) return { string.upper(entry[1]), entry[2] * 2 } end) -- Map( A = 2, B = 4, C = 6 )   "},{"title":"map‚Äã","type":1,"pageTitle":"Map","url":"api/Map#map","content":"&lt;/&gt; Map.map(mapper:¬†( Value, Key )¬†‚Üí¬†( Value?, Key? )) ‚Üí¬†Map Returns a new Map with keys and values passed through a mapper function. Returning a second value in the mapper function will reassign the key. If mapper returns nil for value, the entry will be filtered. Map.new({ a = 1, b = 2, c = 3 }).map(function(value, _key) return value * 10 end) -- Map( a = 10, b = 20, c = 30 )   "},{"title":"mapKeys‚Äã","type":1,"pageTitle":"Map","url":"api/Map#mapKeys","content":"&lt;/&gt; Map.mapKeys(mapper:¬†( Key, Value )¬†‚Üí¬†(Key?)) ‚Üí¬†Map Returns a new Map with keys and values passed through a mapper function. Returning a second value in the mapper function will reassign the index. If mapper returns nil, the entry will be filtered. Map.new({ a = 1, b = 2, c = 3 }).map(function(key) return string.upper(key) end) -- Map( A = 1, B = 2, C = 3 )   "},{"title":"max‚Äã","type":1,"pageTitle":"Map","url":"api/Map#max","content":"&lt;/&gt; Map.max(comparator:¬†(( Value, Value )¬†‚Üí¬†(boolean))?) ‚Üí¬†Value Returns the maximum value in this map. If any values are comparatively equivalent, the first one found will be returned. The comparator is used in the same way as table.sort. If it is not provided, the default comparator is &gt;. Map.new({ a = 10, b = 200, c = 30 }).max() -- 200 Map.new({ alice = child, bertram = teen, charlie = adult }).max(function(personA, personB) return personA.age &gt; personB.age end) -- adult   "},{"title":"merge‚Äã","type":1,"pageTitle":"Map","url":"api/Map#merge","content":"&lt;/&gt; Map.merge(maps:¬†...Map) ‚Üí¬†Map Returns a merged result of all given maps. If Freeze.None is a value assigned to a key, it will delete that key from the resulting map. Alias join Map.new({ a = 10, b = 20 }).merge({ c = 30 }) -- Map( a = 10, b = 20, c = 30 ) Map.new({ a = 10, b = 20 }).merge({ c = 30, d = 40 }, { b = Freeze.None }) -- Map( a = 10, c = 30, d = 40 )   "},{"title":"mergeIn‚Äã","type":1,"pageTitle":"Map","url":"api/Map#mergeIn","content":"&lt;/&gt; Map.mergeIn( keyPath:¬†{any}, maps:¬†...Map ) ‚Üí¬†Map A combination of updateIn and merge, returning a new Map, but performing a merge at the point arrived by following the key path. Map.new({ persons = { alice = { age = 10, }, bertram = { age = 16, }, }, }).mergeIn({ &quot;persons&quot;, &quot;alice&quot; }, { age = 11 }) -- Map( persons = { alice = { age = 11 }, bertram = { age = 16 }, } )   "},{"title":"min‚Äã","type":1,"pageTitle":"Map","url":"api/Map#min","content":"&lt;/&gt; Map.min(comparator:¬†(( Value, Value )¬†‚Üí¬†(boolean))?) ‚Üí¬†Value Returns the minium value in this map. If any values are comparatively equivalent, the first one found will be returned. The comparator is used in the same way as table.sort. If it is not provided, the default comparator is &gt;. Map.new({ a = 10, b = 200, c = 30 }).min() -- 10 Map.new({ alice = child, bertram = teen, charlie = adult }).min(function(personA, personB) return personA.age &gt; personB.age end) -- child   "},{"title":"of‚Äã","type":1,"pageTitle":"Map","url":"api/Map#of","content":"&lt;/&gt; Map.of(values:¬†...{Key:¬†Value}) ‚Üí¬†Map Constructs a new Map object with the given entries. local myMap = Map.of({ &quot;a&quot;, 10 }, { &quot;b&quot;, 20 }, { &quot;c&quot;, 30 }) -- Map ( a = 10, b = 20, c = 30 )   "},{"title":"remove‚Äã","type":1,"pageTitle":"Map","url":"api/Map#remove","content":"&lt;/&gt; Map.remove(key:¬†Key) ‚Üí¬†Map Returns a new map which excludes this key. Map.new({ a = 10, b = 20, c = 30 }).remove(&quot;c&quot;) -- Map( a = 10, b = 20 )   "},{"title":"removeIn‚Äã","type":1,"pageTitle":"Map","url":"api/Map#removeIn","content":"&lt;/&gt; Map.removeIn(keyPath:¬†{any}) ‚Üí¬†Map Returns a new map having removed the value at this keyPath. Map.new({ a = { b = { c = &quot;d&quot; } } }).removeIn({ &quot;a&quot;, &quot;b&quot; }) -- Map( a = {} )   "},{"title":"removeValue‚Äã","type":1,"pageTitle":"Map","url":"api/Map#removeValue","content":"&lt;/&gt; Map.removeValue(value:¬†Value) ‚Üí¬†Map Returns a new map having removed the first entry with the given value. Map.new({ a = 10, b = 20, c = 30 }).removeValue(10) -- Map( b = 20, c = 30 )   "},{"title":"set‚Äã","type":1,"pageTitle":"Map","url":"api/Map#set","content":"&lt;/&gt; Map.set( key:¬†Key, value:¬†Value ) ‚Üí¬†Map Returns a new map which includes value at key. If key already exists, it will be replaced. Map.new({ a = 10, b = 20, c = 30 }).set(&quot;a&quot;, 100) -- Map( a = 100, b = 20, c = 30 )   "},{"title":"setIn‚Äã","type":1,"pageTitle":"Map","url":"api/Map#setIn","content":"&lt;/&gt; Map.setIn( keyPath:¬†{any}, value:¬†Value ) ‚Üí¬†Map Returns a new map having set value at this keyPath. If any keys in keyPath do not exist, a new map will be created at that key. Map.new({ persons = { alice = { age = 10, }, bertram = { age = 16, }, }, }).setIn({ &quot;persons&quot;, &quot;alice&quot;, &quot;age&quot; }, 11) -- Map( persons = { alice = { age = 11 }, bertram = { age = 16 }, } )   "},{"title":"some‚Äã","type":1,"pageTitle":"Map","url":"api/Map#some","content":"&lt;/&gt; Map.some(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†boolean Returns true if predicate returns true for any entry in the map. Map.new({ a = 1, b = 2, c = 3 }).some(function(value, key) return value % 2 == 0 end) -- true   "},{"title":"toList‚Äã","type":1,"pageTitle":"Map","url":"api/Map#toList","content":"&lt;/&gt; Map.toList() ‚Üí¬†List Converts this map to a List. Map.new({ a = 1, b = 2, c = 3 }).toList() -- List( 1, 2, 3 )   "},{"title":"update‚Äã","type":1,"pageTitle":"Map","url":"api/Map#update","content":"&lt;/&gt; Map.update( key:¬†Key, updater:¬†( Value?, Key? )¬†‚Üí¬†(Value), notSetValue:¬†Value? ) ‚Üí¬†Map Returns a new map with the entry at key updated to the result of updater. If the entry does not exist, updater will be given notSetValue or nil. Map.new({ a = 10, b = 20, c = 30 }).update(&quot;a&quot;, function(value) return value * 100 end) -- Map( a = 10000, b = 20, c = 30 ) Map.new({ a = 10, b = 20, c = 30 }).update(&quot;d&quot;, function(value) return value * 100 end, 1) -- Map( a = 10000, b = 20, c = 30, d = 100 )   "},{"title":"updateIn‚Äã","type":1,"pageTitle":"Map","url":"api/Map#updateIn","content":"&lt;/&gt; Map.updateIn( keyPath:¬†{any}, updater:¬†( Value?, Key? )¬†‚Üí¬†(Value), notSetValue:¬†Value? ) ‚Üí¬†Map Returns a new map with the entry at keyPath updated to the result of updater. If any entry does not exist along keyPath, an empty map will be created in its place. If the final entry does not exist, updater will be given notSetValue or nil. Map.new({ persons = { alice = { age = 10, }, bertram = { age = 16, }, }, }).updateIn({ &quot;persons&quot;, &quot;alice&quot;, &quot;age&quot; }, function(value) return value + 1 end) -- Map( persons = { alice = { age = 11 }, bertram = { age = 16 }, } )   "},{"title":"values‚Äã","type":1,"pageTitle":"Map","url":"api/Map#values","content":"&lt;/&gt; Map.values() ‚Üí¬†Map Returns a list of values. Map.new({ a = 1, b = 2, c = 3 }).values() -- Map( 1, 2, 3 )  "},{"title":"List","type":0,"sectionRef":"#","url":"api/List","content":"","keywords":""},{"title":"Functions‚Äã","type":1,"pageTitle":"List","url":"api/List#functions","content":" "},{"title":"butLast‚Äã","type":1,"pageTitle":"List","url":"api/List#butLast","content":"&lt;/&gt; List.butLast() ‚Üí¬†List Returns a new List containing all entires except the last. Equivalent to slice(1, -1). List.of( 1, 2, 3 ).butLast() -- List( 1, 2 )   "},{"title":"concat‚Äã","type":1,"pageTitle":"List","url":"api/List#concat","content":"&lt;/&gt; List.concat(valuesOrIterables:¬†...any) ‚Üí¬†List Returns a new List of the same type concatenated to given arguments. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).concat({ &quot;d&quot;, &quot;e&quot;, &quot;f&quot; }) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; )   "},{"title":"count‚Äã","type":1,"pageTitle":"List","url":"api/List#count","content":"&lt;/&gt; List.count(predicate:¬†(( Value, Key )¬†‚Üí¬†(boolean))?) ‚Üí¬†number Returns the number of entries that match the predicate. If the predicate is not given, all entries will be considered a match. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).count() -- 3   "},{"title":"equals‚Äã","type":1,"pageTitle":"List","url":"api/List#equals","content":"&lt;/&gt; List.equals(other:¬†any) ‚Üí¬†List Returns true if both collections have value equality. local list1 = List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }) local list2 = List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }) list1.equals(list2) -- true   "},{"title":"every‚Äã","type":1,"pageTitle":"List","url":"api/List#every","content":"&lt;/&gt; List.every(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†List Returns true if predicate returns true for all entries in the Iterable. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).every(function(value, key) return string.lower(value) == value end) -- true   "},{"title":"filter‚Äã","type":1,"pageTitle":"List","url":"api/List#filter","content":"&lt;/&gt; List.filter(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†List Returns a new List of only entries for which the predicate function returns true. List.new({ 1, 2, 3, 4 }).filter(function(value, key) return value % 2 == 0 end) -- List( 2, 4 )   "},{"title":"filterNot‚Äã","type":1,"pageTitle":"List","url":"api/List#filterNot","content":"&lt;/&gt; List.filterNot(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†List Returns a new List of only entries for which the predicate function returns false. List.new({ 1, 2, 3, 4 }).filterNot(function(value, key) return value % 2 == 0 end) -- List( 1, 3 )   "},{"title":"find‚Äã","type":1,"pageTitle":"List","url":"api/List#find","content":"&lt;/&gt; List.find(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Value Returns the first value for which the predicate returns true. List.new({ &quot;a&quot;, &quot;B&quot;, &quot;c&quot; }).find(function(value, key) return value == string.upper(v) end) -- &quot;B&quot;   "},{"title":"findEntry‚Äã","type":1,"pageTitle":"List","url":"api/List#findEntry","content":"&lt;/&gt; List.findEntry(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†{ Key, Value } Returns the first [key, value] entry for which the predicate returns true. List.new({ &quot;a&quot;, &quot;B&quot;, &quot;c&quot; }).find(function(value, key) return value == string.upper(v) end) -- { 2, &quot;B&quot; }   "},{"title":"findKey‚Äã","type":1,"pageTitle":"List","url":"api/List#findKey","content":"&lt;/&gt; List.findKey(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†Key Returns the first key for which the predicate returns true. Alias findIndex List.new({ &quot;a&quot;, &quot;B&quot;, &quot;c&quot; }).find(function(value, key) return value == string.upper(v) end) -- 2   "},{"title":"first‚Äã","type":1,"pageTitle":"List","url":"api/List#first","content":"&lt;/&gt; List.first(notSetValue:¬†Value?) ‚Üí¬†Value? Returns the first value in the list. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).first() -- &quot;a&quot;   "},{"title":"flatten‚Äã","type":1,"pageTitle":"List","url":"api/List#flatten","content":"&lt;/&gt; List.flatten(depth:¬†number?) ‚Üí¬†List Returns a flattened list in the same index-order as each Value would appear. List.new({ &quot;foo&quot;, { &quot;bar&quot;, &quot;baz&quot;, }, { &quot;bar&quot;, &quot;baz&quot;, }, &quot;quz&quot;, }).flatten() -- List( &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;quz&quot; )   "},{"title":"forEach‚Äã","type":1,"pageTitle":"List","url":"api/List#forEach","content":"&lt;/&gt; List.forEach(sideEffect:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†number While the List is iterated, the sideEffect is executed for every entry. If any call of the sideEffect returns false, the iteration will stop. Returns the number of entries iterated (including the last iteration which returned false). List.new({ 1, 10, -20, 30 }).forEach(function(value, _key) return value &gt; 0 end) -- 3   "},{"title":"get‚Äã","type":1,"pageTitle":"List","url":"api/List#get","content":"&lt;/&gt; List.get( index:¬†number, notSetValue:¬†Value ) ‚Üí¬†Value? Returns the value at the given index, otherwise returns notSetValue if the given value is not found. If index is negative, the index will start from the last value. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).get(3, &quot;default&quot;) -- &quot;c&quot; List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).get(-3, &quot;default&quot;) -- &quot;e&quot; List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).get(100, &quot;default&quot;) -- &quot;default&quot;   "},{"title":"getIn‚Äã","type":1,"pageTitle":"List","url":"api/List#getIn","content":"&lt;/&gt; List.getIn( keyPath:¬†{any}, notSetValue:¬†Value ) ‚Üí¬†Value? Returns the value if found by following a path of indices, otherwise returns notSetValue if the given value is nil. List.new({ { &quot;a&quot;, { &quot;b&quot;, &quot;c&quot; } }, { &quot;x&quot;, { &quot;y&quot;, &quot;z&quot; } }, }).getIn({ 2, 1 }, &quot;default&quot;) -- &quot;y&quot;   "},{"title":"has‚Äã","type":1,"pageTitle":"List","url":"api/List#has","content":"&lt;/&gt; List.has(index:¬†number) ‚Üí¬†boolean Returns true if the index exists within the List. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).has(2) -- true   "},{"title":"hasIn‚Äã","type":1,"pageTitle":"List","url":"api/List#hasIn","content":"&lt;/&gt; List.hasIn(keyPath:¬†{any}) ‚Üí¬†boolean Returns true if the value is found by following a path of indices. List.new({ { &quot;a&quot;, { &quot;b&quot;, &quot;c&quot; } }, { &quot;x&quot;, { &quot;y&quot;, &quot;z&quot; } }, }).hasIn({ 2, 1 }) -- true   "},{"title":"includes‚Äã","type":1,"pageTitle":"List","url":"api/List#includes","content":"&lt;/&gt; List.includes(value:¬†any) ‚Üí¬†boolean Returns true if the value is found within the List. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).includes(&quot;b&quot;) -- true   "},{"title":"indexOf‚Äã","type":1,"pageTitle":"List","url":"api/List#indexOf","content":"&lt;/&gt; List.indexOf(value:¬†any) ‚Üí¬†Key? Returns the index of the value if found within the List, otherwise returns nil. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).indexOf(&quot;b&quot;) -- 2   "},{"title":"insert‚Äã","type":1,"pageTitle":"List","url":"api/List#insert","content":"&lt;/&gt; List.insert( index:¬†number, values:¬†...Value ) ‚Üí¬†List Inserts values given starting from the given index, pushing existing values towards the end. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).insert(2, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;) -- List( &quot;a&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;b&quot;, &quot;c&quot; )   "},{"title":"isEmpty‚Äã","type":1,"pageTitle":"List","url":"api/List#isEmpty","content":"&lt;/&gt; List.isEmpty() ‚Üí¬†boolean Returns true if the list is empty. List.new({}).isEmpty() -- true   "},{"title":"joinAsString‚Äã","type":1,"pageTitle":"List","url":"api/List#joinAsString","content":"&lt;/&gt; List.joinAsString() ‚Üí¬†string Joins values together as a string, inserting a separator between each. The default separator is &quot;,&quot;. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).joinAsString(&quot;, &quot;) -- &quot;a, b, c&quot;   "},{"title":"last‚Äã","type":1,"pageTitle":"List","url":"api/List#last","content":"&lt;/&gt; List.last(notSetValue:¬†Value?) ‚Üí¬†Value? Returns the last value in the list. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).last() -- &quot;c&quot;   "},{"title":"new‚Äã","type":1,"pageTitle":"List","url":"api/List#new","content":"&lt;/&gt; List.new(collection:¬†{any}?) ‚Üí¬†List Constructs a new List object with the given table. Has a callable shorthand variant: local myList1 = List.new({ 1, 2, 3 }) local myList2 = List({ 1, 2, 3 })  "},{"title":"Errors","type":1,"pageTitle":"List","url":"api/List##","content":"Type\tDescription&quot;List: Expected table&quot;\tRaised when given an invalid argument for collection. Make sure you only provide tables or nil.  "},{"title":"toLuau‚Äã","type":1,"pageTitle":"List","url":"api/List#toLuau","content":"&lt;/&gt; List.toLuau() ‚Üí¬†{Key:¬†Value} Returns a show Luau table representation of the List. List({ 1, 2, 3 }).toLuau() -- { 1, 2, 3 }   "},{"title":"toArray‚Äã","type":1,"pageTitle":"List","url":"api/List#toArray","content":"&lt;/&gt; List.toArray() ‚Üí¬†{Value} Returns a shallow Luau table representation of the List, coercing it to an array. List({ 1, 2, 3 }).toArray() -- { 1, 2, 3 }   "},{"title":"map‚Äã","type":1,"pageTitle":"List","url":"api/List#map","content":"&lt;/&gt; List.map(mapper:¬†( Value, Key )¬†‚Üí¬†( Value?, Key? )) ‚Üí¬†List Returns a new List with values passed through a mapper function. Returning a second value in the mapper function will reassign the index. If mapper returns nil, the entry will be filtered. List.new({ 1, 2, 3 }).map(function(value, _key) return value * 10 end) -- List( 10, 20, 30 )   "},{"title":"max‚Äã","type":1,"pageTitle":"List","url":"api/List#max","content":"&lt;/&gt; List.max(comparator:¬†(( Value, Value )¬†‚Üí¬†(boolean))?) ‚Üí¬†Value Returns the maximum value in this list. If any values are comparatively equivalent, the first one found will be returned. The comparator is used in the same way as table.sort. If it is not provided, the default comparator is &gt;. List.new({ 10, 200, 30 }).max() -- 200 List.new({ child, teen, adult }).max(function(personA, personB) return personA.age &gt; personB.age end) -- adult   "},{"title":"merge‚Äã","type":1,"pageTitle":"List","url":"api/List#merge","content":"&lt;/&gt; List.merge(lists:¬†...List) ‚Üí¬†List Returns a merged result of all given lists. If Freeze.None is a value assigned to a key, it will delete that key from the resulting list. Alias join List.new({ 10, nil, 30 }).merge({ nil, 20, nil }) -- List( 10, 20, 30 ) List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).merge({ &quot;x&quot; }, { nil, &quot;y&quot;, Freeze.None }) -- List( &quot;x&quot;, &quot;y&quot; )   "},{"title":"mergeIn‚Äã","type":1,"pageTitle":"List","url":"api/List#mergeIn","content":"&lt;/&gt; List.mergeIn( keyPath:¬†{any}, lists:¬†...List ) ‚Üí¬†List A combination of updateIn and merge, returning a new List, but performing a merge at the point arrived by following the key path. List.new({ { a = { b = &quot;c&quot; } }, { a = { b = &quot;c&quot; } }, }).mergeIn({ 1, &quot;a&quot; }, { b = &quot;z&quot; }) -- List( { a = { b = &quot;z&quot; } }, { a = { b = &quot;c&quot; } } )   "},{"title":"min‚Äã","type":1,"pageTitle":"List","url":"api/List#min","content":"&lt;/&gt; List.min(comparator:¬†(( Value, Value )¬†‚Üí¬†(boolean))?) ‚Üí¬†Value Returns the minimum value in this list. If any values are comparatively equivalent, the first one found will be returned. The comparator is used in the same way as table.sort. If it is not provided, the default comparator is &gt;. List.new({ 10, 200, 30 }).min() -- 10 List.new({ child, teen, adult }).min(function(personA, personB) return personA.age &gt; personB.age end) -- child   "},{"title":"of‚Äã","type":1,"pageTitle":"List","url":"api/List#of","content":"&lt;/&gt; List.of(values:¬†...any) ‚Üí¬†List Constructs a new List object with the given values. local myList = List.of( 1, 2, 3 )   "},{"title":"pop‚Äã","type":1,"pageTitle":"List","url":"api/List#pop","content":"&lt;/&gt; List.pop(amount:¬†number?) ‚Üí¬†List Returns a new list excluding the last index of this list. List.new({ 10, 20, 30 }).pop() -- List( 10, 20 )   "},{"title":"push‚Äã","type":1,"pageTitle":"List","url":"api/List#push","content":"&lt;/&gt; List.push(values:¬†...Value) ‚Üí¬†List Returns a new list with the provided values appended at the end of the list. Alias append List.new({ 10, 20, 30 }).push(40, 50, 60) -- List( 10, 20, 30, 40, 50, 60 )   "},{"title":"reduce‚Äã","type":1,"pageTitle":"List","url":"api/List#reduce","content":"&lt;/&gt; List.reduce( reducer:¬†( T, Value, Key )¬†‚Üí¬†(T), initialReduction:¬†T? ) ‚Üí¬†T Returns the final reduced result by iterating the list and calling the reducer for every entry and passing along the reduced value. If initialReduction is not provided, the first item in the list will be used. List.new({ 10, 20, 30 }).reduce(function(reduction, value) return reduction + value end) -- 60   "},{"title":"reduceRight‚Äã","type":1,"pageTitle":"List","url":"api/List#reduceRight","content":"&lt;/&gt; List.reduceRight( reducer:¬†( T, Value, Key )¬†‚Üí¬†(T), initialReduction:¬†T? ) ‚Üí¬†T Returns the final reduced result by iterating the list in reverse (from the right side) and calling the reducer for every entry and passing along the reduced value. If initialReduction is not provided, the last item in the list will be used. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).reduceRight(function(reduction, value) return reduction .. value end) -- &quot;cba&quot;   "},{"title":"remove‚Äã","type":1,"pageTitle":"List","url":"api/List#remove","content":"&lt;/&gt; List.remove(index:¬†number) ‚Üí¬†List Returns a new list which excludes this index. Values at indices above index are shifted down by 1 to fill the position. index may be a negative number, which indexes back from the end of the list. list.remove(-1) removes the last item in the list. Alias removeIndex List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).remove(3) -- List( &quot;a&quot;, &quot;b&quot;, &quot;d&quot; )   "},{"title":"removeIn‚Äã","type":1,"pageTitle":"List","url":"api/List#removeIn","content":"&lt;/&gt; List.removeIn(keyPath:¬†{any}) ‚Üí¬†List Returns a new list having removed the value at this keyPath. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, { &quot;d&quot;, &quot;e&quot; } }).removeIn({ 4, 1 }) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;&quot;, { nil, &quot;e&quot; })   "},{"title":"removeValue‚Äã","type":1,"pageTitle":"List","url":"api/List#removeValue","content":"&lt;/&gt; List.removeValue(value:¬†Value) ‚Üí¬†List Returns a new list having removed the first entry with the given value. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).removeValue(&quot;a&quot;) -- List( &quot;b&quot;, &quot;c&quot; )   "},{"title":"reset‚Äã","type":1,"pageTitle":"List","url":"api/List#reset","content":"&lt;/&gt; List.reset() ‚Üí¬†List Returns a new list containing all entries except the first. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).rest() -- List( &quot;b&quot;, &quot;c&quot;, &quot;d&quot; )   "},{"title":"reverse‚Äã","type":1,"pageTitle":"List","url":"api/List#reverse","content":"&lt;/&gt; List.reverse() ‚Üí¬†List Returns a new list in reverse order. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).reverse() -- List( &quot;d&quot;, &quot;c&quot;, &quot;b&quot;, &quot;a&quot; )   "},{"title":"set‚Äã","type":1,"pageTitle":"List","url":"api/List#set","content":"&lt;/&gt; List.set( index:¬†number, value:¬†Value ) ‚Üí¬†List Returns a new list which includes value at index. If index already exists, it will be replaced. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).set(1, &quot;A&quot;) -- List( &quot;A&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; )   "},{"title":"setIn‚Äã","type":1,"pageTitle":"List","url":"api/List#setIn","content":"&lt;/&gt; List.setIn( keyPath:¬†{any}, value:¬†Value ) ‚Üí¬†List Returns a new list having set value at this keyPath. If any keys in keyPath do not exist, a new map will be created at that key. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, { &quot;d&quot; , &quot;e&quot; } }).setIn({ 4, 1 }, &quot;D&quot;) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot; { &quot;D&quot;, &quot;e&quot; } )   "},{"title":"shift‚Äã","type":1,"pageTitle":"List","url":"api/List#shift","content":"&lt;/&gt; List.shift() ‚Üí¬†List Returns a new list excluding the first index in this list, shifting all other values to a lower index. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).shift() -- List( &quot;b&quot;, &quot;c&quot;, &quot;d&quot; )   "},{"title":"skip‚Äã","type":1,"pageTitle":"List","url":"api/List#skip","content":"&lt;/&gt; List.skip(amount:¬†number) ‚Üí¬†List Returns a new list which excludes the first amount of entries. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).skip(3) -- List( &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; )   "},{"title":"slice‚Äã","type":1,"pageTitle":"List","url":"api/List#slice","content":"&lt;/&gt; List.slice( from:¬†number?, to:¬†number? ) ‚Üí¬†List Returns a new list that includes the range [from, to). If from is negative, it is offset from the end of the list. slice(-2) returns a list of the last two entries. If it is not provided, the new list will begin at the first entry. If to is negative, it is offset from the end of the list. slice(0, -1) returns a list of everything but the last entry. If it is not provided, the new list will continue through the end of the list. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).slice() -- List( &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; ) List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).slice(-2) -- List( &quot;f&quot;, &quot;g&quot; ) List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot; }).slice(0, -1) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot; )   "},{"title":"some‚Äã","type":1,"pageTitle":"List","url":"api/List#some","content":"&lt;/&gt; List.some(predicate:¬†( Value, Key )¬†‚Üí¬†(boolean)) ‚Üí¬†boolean Returns true if predicate returns true for any entry in the list. List.new({ 1, 2, 3, 4, 5, 6 }).some(function(value, key) return value % 2 == 0 end) -- true   "},{"title":"sort‚Äã","type":1,"pageTitle":"List","url":"api/List#sort","content":"&lt;/&gt; List.sort(comparator:¬†(( Value, Value )¬†‚Üí¬†(boolean))?) ‚Üí¬†List Returns a new list which includes the same entries, sorted by using a comparator. If a comparator is not provided, a default comparator uses &lt; and &gt;. List.new({ -10, 15, 10, -20 }).sort() -- List( -20, -10, 10, 15 )   "},{"title":"take‚Äã","type":1,"pageTitle":"List","url":"api/List#take","content":"&lt;/&gt; List.take(amount:¬†number) ‚Üí¬†List Returns a new list which includes the first amount of entires. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).take(2) -- List( &quot;a&quot;, &quot;b&quot; )   "},{"title":"takeLast‚Äã","type":1,"pageTitle":"List","url":"api/List#takeLast","content":"&lt;/&gt; List.takeLast(amount:¬†number) ‚Üí¬†List Returns a new list which includes the last amount of entires. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).take(2) -- List( &quot;c&quot;, &quot;d&quot; )   "},{"title":"toMap‚Äã","type":1,"pageTitle":"List","url":"api/List#toMap","content":"&lt;/&gt; List.toMap() ‚Üí¬†Map Converts this list to a Map. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }).toMap() -- Map( 1 = &quot;a&quot;, 2 = &quot;b&quot;, 3 = &quot;c&quot;, 4 = &quot;d&quot; )   "},{"title":"unshift‚Äã","type":1,"pageTitle":"List","url":"api/List#unshift","content":"&lt;/&gt; List.unshift(values:¬†...Value) ‚Üí¬†List Returns a new list with the provided values prepended, shifting other values ahead to higher indices. List.new({ 2, 3, 4 }).unshift(1) -- List( 1, 2, 3, 4 )   "},{"title":"update‚Äã","type":1,"pageTitle":"List","url":"api/List#update","content":"&lt;/&gt; List.update( index:¬†number, updater:¬†( Value?, Key? )¬†‚Üí¬†(Value), notSetValue:¬†Value? ) ‚Üí¬†List Returns a new list with the entry at index updated to the result of updater. If the entry does not exist, updater will be given notSetValue or nil. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).update(2, function(value) return string.rep(value, 5) end) -- List( &quot;a&quot;, &quot;bbbbb&quot;, &quot;c&quot; ) List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).update(4, function(value) return string.rep(value, 5) end, &quot;d&quot;) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;ddddd&quot; )   "},{"title":"updateIn‚Äã","type":1,"pageTitle":"List","url":"api/List#updateIn","content":"&lt;/&gt; List.updateIn( keyPath:¬†{any}, updater:¬†( Value?, Key? )¬†‚Üí¬†(Value), notSetValue:¬†Value? ) ‚Üí¬†List Returns a new list with the entry at keyPath updated to the result of updater. If any entry does not exist along keyPath, an empty map will be created in its place. If the final entry does not exist, updater will be given notSetValue or nil. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, { &quot;d&quot;, &quot;e&quot; } }).updateIn({ 4, 1 }, function(value) return string.rep(value, 5) end) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot; { &quot;ddddd&quot;, &quot;e&quot; } ) List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, { &quot;d&quot;, &quot;e&quot; } }).updateIn({ 4, 3, 1 }, function(value) return string.rep(value, 5) end, &quot;g&quot;) -- List( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, { &quot;d&quot;, &quot;e&quot;, { &quot;ggggg&quot; } } )   "},{"title":"zip‚Äã","type":1,"pageTitle":"List","url":"api/List#zip","content":"&lt;/&gt; List.zip(lists:¬†...Iterable) ‚Üí¬†List Returns a new list with all lists given &quot;zipped&quot; together. The length of the new list is the length of the shorted provided list. List.new({ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; }).zip({ &quot;x&quot;, &quot;y&quot;, &quot;z&quot; }) -- List( { &quot;a&quot;, &quot;x&quot; }, { &quot;b&quot;, &quot;y&quot; }, { &quot;c&quot;, &quot;z&quot; } ) List.new({ alice, bertram, charlie }).zip({ alexander, betty, candice, dennis }) -- List( { alice, alexander }, { bertram, betty }, { charlie, candice } )  "}]