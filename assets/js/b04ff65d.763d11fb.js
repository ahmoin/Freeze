"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[85],{10440:function(e){e.exports=JSON.parse('{"functions":[{"name":"butLast","desc":"Returns a new List containing all entires except the last.\\nEquivalent to `slice(1, -1)`.\\n\\n```lua\\nList.of( 1, 2, 3 ).butLast()\\n-- List( 1, 2 )\\n```","params":[],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/butLast.lua"}},{"name":"concat","desc":"Returns a new List of the same type concatenated to given arguments.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).concat({ \\"d\\", \\"e\\", \\"f\\" })\\n-- List( \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\" )\\n```","params":[{"name":"valuesOrIterables","desc":"","lua_type":"...any"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/concat.lua"}},{"name":"count","desc":"Returns the number of entries that match the predicate.\\nIf the predicate is not given, all entries will be considered a match.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).count()\\n-- 3\\n```","params":[{"name":"predicate","desc":"","lua_type":"((Value, Key) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":15,"path":"source/List/count.lua"}},{"name":"equals","desc":"Returns true if both collections have value equality.\\n\\n```lua\\nlocal list1 = List.new({ \\"a\\", \\"b\\", \\"c\\" })\\nlocal list2 = List.new({ \\"a\\", \\"b\\", \\"c\\" })\\n\\nlist1.equals(list2)\\n-- true\\n```","params":[{"name":"other","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":17,"path":"source/List/equals.lua"}},{"name":"every","desc":"Returns true if `predicate` returns true for all entries in the Iterable.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).every(function(value, key)\\n\\treturn string.lower(value) == value\\nend)\\n-- true\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":16,"path":"source/List/every.lua"}},{"name":"filter","desc":"Returns a new List of only entries for which the `predicate` function returns true.\\n\\n```lua\\nList.new({ 1, 2, 3, 4 }).filter(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- List( 2, 4 )\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":16,"path":"source/List/filter.lua"}},{"name":"filterNot","desc":"Returns a new List of only entries for which the `predicate` function returns false.\\n\\n```lua\\nList.new({ 1, 2, 3, 4 }).filterNot(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- List( 1, 3 )\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":16,"path":"source/List/filterNot.lua"}},{"name":"find","desc":"Returns the first value for which the `predicate` returns true.\\n\\n```lua\\nList.new({ \\"a\\", \\"B\\", \\"c\\" }).find(function(value, key)\\n\\treturn value == string.upper(v)\\nend)\\n-- \\"B\\"\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Value"}],"function_type":"static","source":{"line":16,"path":"source/List/find.lua"}},{"name":"findEntry","desc":"Returns the first [key, value] entry for which the `predicate` returns true.\\n\\n```lua\\nList.new({ \\"a\\", \\"B\\", \\"c\\" }).find(function(value, key)\\n\\treturn value == string.upper(v)\\nend)\\n-- { 2, \\"B\\" }\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"{ Key, Value }"}],"function_type":"static","source":{"line":16,"path":"source/List/findEntry.lua"}},{"name":"findKey","desc":"Returns the first key for which the `predicate` returns true.\\n\\n##### Alias\\n`findIndex`\\n\\n```lua\\nList.new({ \\"a\\", \\"B\\", \\"c\\" }).find(function(value, key)\\n\\treturn value == string.upper(v)\\nend)\\n-- 2\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Key"}],"function_type":"static","source":{"line":19,"path":"source/List/findKey.lua"}},{"name":"first","desc":"Returns the first value in the list.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).first()\\n-- \\"a\\"\\n```","params":[{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":14,"path":"source/List/first.lua"}},{"name":"flatten","desc":"Returns a flattened list in the same index-order as each Value would appear.\\n\\n```lua\\nList.new({\\n\\t\\"foo\\",\\n\\t{\\n\\t\\t\\"bar\\",\\n\\t\\t\\"baz\\",\\n\\t},\\n\\t{\\n\\t\\t\\"bar\\",\\n\\t\\t\\"baz\\",\\n\\t},\\n\\t\\"quz\\",\\n}).flatten()\\n-- List( \\"foo\\", \\"bar\\", \\"baz\\", \\"bar\\", \\"baz\\", \\"quz\\" )\\n```","params":[{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":25,"path":"source/List/flatten.lua"}},{"name":"forEach","desc":"While the List is iterated, the `sideEffect` is executed for every entry.\\nIf any call of the `sideEffect` returns `false`, the iteration will stop.\\nReturns the number of entries iterated (including the last iteration which returned false).\\n\\n```lua\\nList.new({ 1, 10, -20, 30 }).forEach(function(value, _key)\\n\\treturn value > 0\\nend)\\n-- 3\\n```","params":[{"name":"sideEffect","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":18,"path":"source/List/forEach.lua"}},{"name":"get","desc":"Returns the value at the given index, otherwise returns `notSetValue` if the given value is not found.\\n\\nIf `index` is negative, the index will start from the last value.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).get(3, \\"default\\")\\n-- \\"c\\"\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).get(-3, \\"default\\")\\n-- \\"e\\"\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).get(100, \\"default\\")\\n-- \\"default\\"\\n```","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"notSetValue","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":23,"path":"source/List/get.lua"}},{"name":"getIn","desc":"Returns the value if found by following a path of indices, otherwise returns `notSetValue` if the given value is nil.\\n\\n```lua\\nList.new({\\n\\t{ \\"a\\", { \\"b\\", \\"c\\" } },\\n\\t{ \\"x\\", { \\"y\\", \\"z\\" } },\\n}).getIn({ 2, 1 }, \\"default\\")\\n-- \\"y\\"\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"notSetValue","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":18,"path":"source/List/getIn.lua"}},{"name":"has","desc":"Returns true if the index exists within the List.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).has(2)\\n-- true\\n```","params":[{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":14,"path":"source/List/has.lua"}},{"name":"hasIn","desc":"Returns true if the value is found by following a path of indices.\\n\\n```lua\\nList.new({\\n\\t{ \\"a\\", { \\"b\\", \\"c\\" } },\\n\\t{ \\"x\\", { \\"y\\", \\"z\\" } },\\n}).hasIn({ 2, 1 })\\n-- true\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":17,"path":"source/List/hasIn.lua"}},{"name":"includes","desc":"Returns true if the value is found within the List.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).includes(\\"b\\")\\n-- true\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":14,"path":"source/List/includes.lua"}},{"name":"indexOf","desc":"Returns the index of the value if found within the List, otherwise returns nil.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).indexOf(\\"b\\")\\n-- 2\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Key?"}],"function_type":"static","source":{"line":14,"path":"source/List/indexOf.lua"}},{"name":"insert","desc":"Inserts values given starting from the given index, pushing existing values towards the end.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).insert(2, \\"x\\", \\"y\\", \\"z\\")\\n-- List( \\"a\\", \\"x\\", \\"y\\", \\"z\\", \\"b\\", \\"c\\" )\\n```","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"values","desc":"","lua_type":"...Value"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":15,"path":"source/List/insert.lua"}},{"name":"isEmpty","desc":"Returns true if the list is empty.\\n\\n```lua\\nList.new({}).isEmpty()\\n-- true\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":13,"path":"source/List/isEmpty.lua"}},{"name":"joinAsString","desc":"Joins values together as a string, inserting a separator between each.\\n\\nThe default separator is `\\",\\"`.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).joinAsString(\\", \\")\\n-- \\"a, b, c\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":15,"path":"source/List/joinAsString.lua"}},{"name":"last","desc":"Returns the last value in the list.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).last()\\n-- \\"c\\"\\n```","params":[{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":14,"path":"source/List/last.lua"}},{"name":"new","desc":"Constructs a new List object with the given table.\\n\\nHas a callable shorthand variant:\\n\\n```lua\\nlocal myList1 = List.new({ 1, 2, 3 })\\nlocal myList2 = List({ 1, 2, 3 })\\n```","params":[{"name":"collection","desc":"","lua_type":"{ any }?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","errors":[{"lua_type":"\\"List: Expected table\\"","desc":"Raised when given an invalid argument for collection. Make sure you only provide tables or nil."}],"source":{"line":86,"path":"source/List/List.lua"}},{"name":"toLuau","desc":"Returns a show Luau table representation of the List.\\n\\n```lua\\nList({ 1, 2, 3 }).toLuau()\\n-- { 1, 2, 3 }\\n```","params":[],"returns":[{"desc":"","lua_type":"{ Key: Value }"}],"function_type":"static","source":{"line":111,"path":"source/List/List.lua"}},{"name":"toArray","desc":"Returns a shallow Luau table representation of the List, coercing it to an array.\\n\\n```lua\\nList({ 1, 2, 3 }).toArray()\\n-- { 1, 2, 3 }\\n```","params":[],"returns":[{"desc":"","lua_type":"{ Value }"}],"function_type":"static","source":{"line":125,"path":"source/List/List.lua"}},{"name":"map","desc":"Returns a new List with values passed through a `mapper` function.\\n\\nReturning a second value in the mapper function will reassign the index.\\n\\nIf `mapper` returns nil, the entry will be filtered.\\n\\n```lua\\nList.new({ 1, 2, 3 }).map(function(value, _key)\\n\\treturn value * 10\\nend)\\n-- List( 10, 20, 30 )\\n```","params":[{"name":"mapper","desc":"","lua_type":"(Value, Key) -> (Value?, Key?)"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":20,"path":"source/List/map.lua"}},{"name":"max","desc":"Returns the maximum value in this list.\\nIf any values are comparatively equivalent, the first one found will be returned.\\n\\nThe `comparator` is used in the same way as `table.sort`. If it is not provided, the default comparator is `>`.\\n\\n```lua\\nList.new({ 10, 200, 30 }).max()\\n-- 200\\n\\nList.new({ child, teen, adult }).max(function(personA, personB)\\n\\treturn personA.age > personB.age\\nend)\\n-- adult\\n```","params":[{"name":"comparator","desc":"","lua_type":"((Value, Value) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"Value"}],"function_type":"static","source":{"line":22,"path":"source/List/max.lua"}},{"name":"merge","desc":"Returns a merged result of all given lists.\\n\\nIf `Freeze.None` is a value assigned to a key, it will delete that key from the resulting list.\\n\\n##### Alias\\n`join`\\n\\n```lua\\nList.new({ 10, nil, 30 }).merge({ nil, 20, nil })\\n-- List( 10, 20, 30 )\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).merge({ \\"x\\" }, { nil, \\"y\\", Freeze.None })\\n-- List( \\"x\\", \\"y\\" )\\n```","params":[{"name":"lists","desc":"","lua_type":"...List"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":22,"path":"source/List/merge.lua"}},{"name":"mergeIn","desc":"A combination of `updateIn` and `merge`, returning a new List,\\nbut performing a merge at the point arrived by following the key path.\\n\\n```lua\\nList.new({\\n\\t{ a = { b = \\"c\\" } },\\n\\t{ a = { b = \\"c\\" } },\\n}).mergeIn({ 1, \\"a\\" }, { b = \\"z\\" })\\n-- List( { a = { b = \\"z\\" } }, { a = { b = \\"c\\" } } )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"lists","desc":"","lua_type":"...List"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":19,"path":"source/List/mergeIn.lua"}},{"name":"min","desc":"Returns the minimum value in this list.\\nIf any values are comparatively equivalent, the first one found will be returned.\\n\\nThe `comparator` is used in the same way as `table.sort`. If it is not provided, the default comparator is `>`.\\n\\n```lua\\nList.new({ 10, 200, 30 }).min()\\n-- 10\\n\\nList.new({ child, teen, adult }).min(function(personA, personB)\\n\\treturn personA.age > personB.age\\nend)\\n-- child\\n```","params":[{"name":"comparator","desc":"","lua_type":"((Value, Value) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"Value"}],"function_type":"static","source":{"line":22,"path":"source/List/min.lua"}},{"name":"of","desc":"Constructs a new List object with the given values.\\n\\n```lua\\nlocal myList = List.of( 1, 2, 3 )\\n```","params":[{"name":"values","desc":"","lua_type":"...any"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":13,"path":"source/List/of.lua"}},{"name":"pop","desc":"Returns a new list excluding the last index of this list.\\n\\n\\n```lua\\nList.new({ 10, 20, 30 }).pop()\\n-- List( 10, 20 )\\n```","params":[{"name":"amount","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":15,"path":"source/List/pop.lua"}},{"name":"push","desc":"Returns a new list with the provided `values` appended at the end of the list.\\n\\n##### Alias\\n`append`\\n\\n```lua\\nList.new({ 10, 20, 30 }).push(40, 50, 60)\\n-- List( 10, 20, 30, 40, 50, 60 )\\n```","params":[{"name":"values","desc":"","lua_type":"...Value"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":17,"path":"source/List/push.lua"}},{"name":"reduce","desc":"Returns the final reduced result by iterating the list and calling the `reducer` for every entry\\nand passing along the reduced value.\\n\\nIf `initialReduction` is not provided, the first item in the list will be used.\\n\\n```lua\\nList.new({ 10, 20, 30 }).reduce(function(reduction, value)\\n\\treturn reduction + value\\nend)\\n-- 60\\n```","params":[{"name":"reducer","desc":"","lua_type":"(T, Value, Key) -> (T)"},{"name":"initialReduction","desc":"","lua_type":"T?"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","source":{"line":20,"path":"source/List/reduce.lua"}},{"name":"reduceRight","desc":"Returns the final reduced result by iterating the list in reverse (from the right side) and calling the `reducer` for every entry\\nand passing along the reduced value.\\n\\nIf `initialReduction` is not provided, the last item in the list will be used.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).reduceRight(function(reduction, value)\\n\\treturn reduction .. value\\nend)\\n-- \\"cba\\"\\n```","params":[{"name":"reducer","desc":"","lua_type":"(T, Value, Key) -> (T)"},{"name":"initialReduction","desc":"","lua_type":"T?"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","source":{"line":20,"path":"source/List/reduceRight.lua"}},{"name":"remove","desc":"Returns a new list which excludes this `index`. Values at indices above `index` are shifted down by 1 to fill the position.\\n\\n`index` may be a negative number, which indexes back from the end of the list.\\n`list.remove(-1)` removes the last item in the list.\\n\\n##### Alias\\n`removeIndex`\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).remove(3)\\n-- List( \\"a\\", \\"b\\", \\"d\\" )\\n```","params":[{"name":"index","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":20,"path":"source/List/remove.lua"}},{"name":"removeIn","desc":"Returns a new list having removed the value at this `keyPath`.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", { \\"d\\", \\"e\\" } }).removeIn({ 4, 1 })\\n-- List( \\"a\\", \\"b\\", \\"c\\"\\", { nil, \\"e\\" })\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/removeIn.lua"}},{"name":"removeValue","desc":"Returns a new list having removed the first entry with the given `value`.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).removeValue(\\"a\\")\\n-- List( \\"b\\", \\"c\\" )\\n```","params":[{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/removeValue.lua"}},{"name":"reset","desc":"Returns a new list containing all entries except the first.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).rest()\\n-- List( \\"b\\", \\"c\\", \\"d\\" )\\n```","params":[],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":13,"path":"source/List/rest.lua"}},{"name":"reverse","desc":"Returns a new list in reverse order.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).reverse()\\n-- List( \\"d\\", \\"c\\", \\"b\\", \\"a\\" )\\n```","params":[],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":13,"path":"source/List/reverse.lua"}},{"name":"set","desc":"Returns a new list which includes `value` at `index`.\\nIf `index` already exists, it will be replaced.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).set(1, \\"A\\")\\n-- List( \\"A\\", \\"b\\", \\"c\\", \\"d\\" )\\n```","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":16,"path":"source/List/set.lua"}},{"name":"setIn","desc":"Returns a new list having set `value` at this `keyPath`.\\nIf any keys in `keyPath` do not exist, a new map will be created at that key.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", { \\"d\\" , \\"e\\" } }).setIn({ 4, 1 }, \\"D\\")\\n-- List( \\"a\\", \\"b\\", \\"c\\" { \\"D\\", \\"e\\" } )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":16,"path":"source/List/setIn.lua"}},{"name":"shift","desc":"Returns a new list excluding the first index in this list, shifting all other values to a lower index.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).shift()\\n-- List( \\"b\\", \\"c\\", \\"d\\" )\\n```","params":[],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":13,"path":"source/List/shift.lua"}},{"name":"skip","desc":"Returns a new list which excludes the first `amount` of entries.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).skip(3)\\n-- List( \\"d\\", \\"e\\", \\"f\\", \\"g\\" )\\n```","params":[{"name":"amount","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/skip.lua"}},{"name":"slice","desc":"Returns a new list that includes the range `[from, to)`.\\n\\nIf `from` is negative, it is offset from the end of the list.\\n`slice(-2)` returns a list of the last two entries.\\nIf it is not provided, the new list will begin at the first entry.\\n\\nIf `to` is negative, it is offset from the end of the list.\\n`slice(0, -1)` returns a list of everything but the last entry.\\nIf it is not provided, the new list will continue through the end of the list.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).slice()\\n-- List( \\"d\\", \\"e\\", \\"f\\", \\"g\\" )\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).slice(-2)\\n-- List( \\"f\\", \\"g\\" )\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\" }).slice(0, -1)\\n-- List( \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\" )\\n```","params":[{"name":"from","desc":"","lua_type":"number?"},{"name":"to","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":29,"path":"source/List/slice.lua"}},{"name":"some","desc":"Returns true if `predicate` returns true for any entry in the list.\\n\\n```lua\\nList.new({ 1, 2, 3, 4, 5, 6 }).some(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- true\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":16,"path":"source/List/some.lua"}},{"name":"sort","desc":"Returns a new list which includes the same entries, sorted by using a `comparator`.\\n\\nIf a `comparator` is not provided, a default comparator uses `<` and `>`.\\n\\n```lua\\nList.new({ -10, 15, 10, -20 }).sort()\\n-- List( -20, -10, 10, 15 )\\n```","params":[{"name":"comparator","desc":"","lua_type":"((Value, Value) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":16,"path":"source/List/sort.lua"}},{"name":"take","desc":"Returns a new list which includes the first `amount` of entires.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).take(2)\\n-- List( \\"a\\", \\"b\\" )\\n```","params":[{"name":"amount","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/take.lua"}},{"name":"takeLast","desc":"Returns a new list which includes the last `amount` of entires.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).take(2)\\n-- List( \\"c\\", \\"d\\" )\\n```","params":[{"name":"amount","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/takeLast.lua"}},{"name":"toMap","desc":"Converts this list to a Map.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", \\"d\\" }).toMap()\\n-- Map( 1 = \\"a\\", 2 = \\"b\\", 3 = \\"c\\", 4 = \\"d\\" )\\n```","params":[],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":13,"path":"source/List/toMap.lua"}},{"name":"unshift","desc":"Returns a new list with the provided `values` prepended, shifting other values ahead to higher indices.\\n\\n```lua\\nList.new({ 2, 3, 4 }).unshift(1)\\n-- List( 1, 2, 3, 4 )\\n```","params":[{"name":"values","desc":"","lua_type":"...Value"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":14,"path":"source/List/unshift.lua"}},{"name":"update","desc":"Returns a new list with the entry at `index` updated to the result of `updater`.\\n\\nIf the entry does not exist, `updater` will be given `notSetValue` or nil.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).update(2, function(value)\\n\\treturn string.rep(value, 5)\\nend)\\n-- List( \\"a\\", \\"bbbbb\\", \\"c\\" )\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).update(4, function(value)\\n\\treturn string.rep(value, 5)\\nend, \\"d\\")\\n-- List( \\"a\\", \\"b\\", \\"c\\", \\"ddddd\\" )\\n```","params":[{"name":"index","desc":"","lua_type":"number"},{"name":"updater","desc":"","lua_type":"(Value?, Key?) -> (Value)"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":25,"path":"source/List/update.lua"}},{"name":"updateIn","desc":"Returns a new list with the entry at `keyPath` updated to the result of `updater`.\\n\\nIf any entry does not exist along `keyPath`, an empty map will be created in its place.\\nIf the final entry does not exist, `updater` will be given `notSetValue` or nil.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\", { \\"d\\", \\"e\\" } }).updateIn({ 4, 1 }, function(value)\\n\\treturn string.rep(value, 5)\\nend)\\n-- List( \\"a\\", \\"b\\", \\"c\\" { \\"ddddd\\", \\"e\\" } )\\n\\nList.new({ \\"a\\", \\"b\\", \\"c\\", { \\"d\\", \\"e\\" } }).updateIn({ 4, 3, 1 }, function(value)\\n\\treturn string.rep(value, 5)\\nend, \\"g\\")\\n-- List( \\"a\\", \\"b\\", \\"c\\", { \\"d\\", \\"e\\", { \\"ggggg\\" } } )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"updater","desc":"","lua_type":"(Value?, Key?) -> (Value)"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":26,"path":"source/List/updateIn.lua"}},{"name":"zip","desc":"Returns a new list with all lists given \\"zipped\\" together.\\nThe length of the new list is the length of the shorted provided list.\\n\\n```lua\\nList.new({ \\"a\\", \\"b\\", \\"c\\" }).zip({ \\"x\\", \\"y\\", \\"z\\" })\\n-- List( { \\"a\\", \\"x\\" }, { \\"b\\", \\"y\\" }, { \\"c\\", \\"z\\" } )\\n\\nList.new({ alice, bertram, charlie }).zip({ alexander, betty, candice, dennis })\\n-- List( { alice, alexander }, { bertram, betty }, { charlie, candice } )\\n```","params":[{"name":"lists","desc":"","lua_type":"...Iterable"}],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":18,"path":"source/List/zip.lua"}}],"properties":[],"types":[],"name":"List","desc":"Handles array-like operations.","source":{"line":6,"path":"source/List/List.lua"}}')}}]);