"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[158],{95250:e=>{e.exports=JSON.parse('{"functions":[{"name":"join","desc":"","params":[{"name":"...","desc":"","lua_type":"{ [Key]: Value }"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","deprecated":{"version":"v0.0.4","desc":"Use [Dictionary.merge] instead."},"source":{"line":9,"path":"source/Dictionary/compat/join.lua"}},{"name":"removeKey","desc":"","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"key","desc":"","lua_type":"Key"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","deprecated":{"version":"v0.0.4","desc":"Use [Dictionary.remove] instead."},"source":{"line":9,"path":"source/Dictionary/compat/removeKey.lua"}},{"name":"removeKeys","desc":"","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"...","desc":"","lua_type":"Key"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","deprecated":{"version":"v0.0.4","desc":"Use [Dictionary.remove] instead."},"source":{"line":9,"path":"source/Dictionary/compat/removeKeys.lua"}},{"name":"removeValues","desc":"","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"...","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","deprecated":{"version":"v0.0.4","desc":"Use [Dictionary.removeValue] instead."},"source":{"line":9,"path":"source/Dictionary/compat/removeValues.lua"}},{"name":"toArray","desc":"","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"}],"returns":[{"desc":"","lua_type":"{ Value }\\n"}],"function_type":"static","deprecated":{"version":"v0.0.4","desc":"Use [Dictionary.values] instead."},"source":{"line":9,"path":"source/Dictionary/compat/toArray.lua"}},{"name":"count","desc":"Returns the number of pairs that match the `predicate`.\\nIf the `predicate` is not given, all pairs will be considered a match.\\n\\n```lua\\nDictionary.count({ a = 1, b = 2, c = 3 }).count()\\n-- 3\\n\\nDictionary.count({ a = 1, b = 2, c = 3 }, function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- 1\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"((Value, Key) -> boolean)?"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":20,"path":"source/Dictionary/count.lua"}},{"name":"equals","desc":"Returns true if both Dictionaries have _value_ equality.\\n\\n:::info\\n\\nIf you only require reference equal, use the `==` operator.\\n\\n:::\\n\\n```lua\\nlocal dictionary1 = { a = 1, b = 2, c = 3 }\\nlocal dictionary2 = { a = 1, b = 2, c = 3 }\\n\\nDictionary.equals(dictionary1, dictionary2)\\n-- true\\n```","params":[{"name":"dictionaryA","desc":"","lua_type":"{ [Key]: Value }"},{"name":"dictionaryB","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":23,"path":"source/Dictionary/equals.lua"}},{"name":"every","desc":"Returns true if `predicate` returns true for all entries in the Dictionary.\\n\\n```lua\\nDictionary.every({ a = 1, b = 2, c = 3 }, function(value, key)\\n\\treturn value < 10\\nend)\\n-- true\\n```","params":[{"name":"list","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"(Value, Key) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/every.lua"}},{"name":"filter","desc":"Returns a Dictionary of only entries for which the `predicate` function returns true.\\n\\n```lua\\nDictionary.filter({ a = 1, b = 2, c = 3, d = 4 }, function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- { b = 2, d = 4 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"((Value, Key) -> boolean)"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/filter.lua"}},{"name":"filterNot","desc":"Returns a Dictionary of only entries for which the `predicate` function returns false.\\n\\n```lua\\nDictionary.filterNot({ a = 1, b = 2, c = 3, d = 4 }, function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- { a = 1, c = 3 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"(Value, Key) -> boolean"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","source":{"line":16,"path":"source/Dictionary/filterNot.lua"}},{"name":"find","desc":"Returns the first value for which the `predicate` returns true.\\n\\n```lua\\nDictionary.find({ a = 1, b = 2, c = 3 }, function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- 2\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"(Value, Key) -> boolean"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Value?\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/find.lua"}},{"name":"findKey","desc":"Returns the first key for which the `predicate` returns true.\\n\\n```lua\\nDictionary.findKey({ a = 1, b = 2, c = 3 }, function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- \\"b\\"\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"(Value, Key) -> boolean"},{"name":"notSetValue","desc":"","lua_type":"Key?"}],"returns":[{"desc":"","lua_type":"Key?\\n"}],"function_type":"static","source":{"line":16,"path":"source/Dictionary/findKey.lua"}},{"name":"findPair","desc":"Returns the first (key, value) pair for which the `predicate` returns true.\\n\\n```lua\\nDictionary.findPair({ a = 1, b = 2 c = 3, d = 4 }, function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- ( \\"b\\", 2 )\\n```","params":[{"name":"list","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"((Value, Key) -> boolean)"}],"returns":[{"desc":"","lua_type":"Key?"},{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":16,"path":"source/Dictionary/findPair.lua"}},{"name":"flatten","desc":"Returns a flattened dictionary by combining keys of the lowest depth.\\n\\nIf provided `depth`, the flattening will early-out.\\n\\n```lua\\nDictionary.flatten({\\n\\tfoo = 1,\\n\\tfoobar = {\\n\\t\\tbar = 2,\\n\\t\\tbaz = {\\n\\t\\t\\tetc = 3,\\n\\t\\t},\\n\\t},\\n})\\n-- { foo = 1, bar = 2, etc = 3 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [any]: any }"},{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","source":{"line":44,"path":"source/Dictionary/flatten.lua"}},{"name":"flip","desc":"Returns a new map where keys and values are flipped.\\n\\n```lua\\nDictionary.flip({ a = \\"x\\", b = \\"y\\", c = \\"z\\" )\\n-- { x = \\"a\\", y = \\"b\\", z = \\"c\\" }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"}],"returns":[{"desc":"","lua_type":"{ [Value]: Key }\\n"}],"function_type":"static","source":{"line":13,"path":"source/Dictionary/flip.lua"}},{"name":"forEach","desc":"While the Dictionary is iterated, the `sideEffect` is executed for every entry.\\nIf any call of the `sideEffect` returns `false`, the iteration will stop.\\n\\nReturns the number of entries iterated (including the last iteration which returned false).\\n\\n```lua\\nDictionary.forEach({ a = 10, b = 20, c = -10, d = 30 }, function(value, key)\\n\\treturn value > 0\\nend)\\n-- 3\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"sideEffect","desc":"","lua_type":"(Value, Key) -> boolean"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":18,"path":"source/Dictionary/forEach.lua"}},{"name":"get","desc":"Returns the value at the given key, otherwise returns `notSetValue` if the given value is not found.\\n```lua\\nDictionary.get({ a = 1, b = 2, c = 3 }, \\"a\\")\\n-- 1\\n\\nDictionary.get({ a = 1, b = 2, c = 3 }, \\"foobar\\", \\"default\\")\\n-- \\"default\\"\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"key","desc":"","lua_type":"Key"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Value?\\n"}],"function_type":"static","source":{"line":14,"path":"source/Dictionary/get.lua"}},{"name":"getIn","desc":"Returns the value if found by following a path of keys, otherwise returns `notSetValue` if the given value is nil.\\n\\n```lua\\nlocal dictionary = { a = { b = \\"c\\" } }\\nDictionary.getIn(dictionary), { \\"a\\", \\"b\\" })\\n-- \\"c\\"\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [any]: any }"},{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Value?\\n"}],"function_type":"static","source":{"line":14,"path":"source/Dictionary/getIn.lua"}},{"name":"has","desc":"Returns true if the key exists within the Dictionary.\\n\\n```lua\\nDictionary.has({ a = 1, b = 2, c = 3 }, \\"b\\")\\n-- true\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"key","desc":"","lua_type":"Key"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":12,"path":"source/Dictionary/has.lua"}},{"name":"hasIn","desc":"Returns true if the value is found by following a path of keys.\\n\\n```lua\\nlocal dictionary = { a = { b = \\"c\\" } }\\nDictionary.hasIn(dictionary, { \\"a\\", \\"b\\" })\\n-- true\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"keyPath","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/hasIn.lua"}},{"name":"includes","desc":"Returns true if the value is found within the Dictionary.\\n\\n```lua\\nDictionary.includes({ a = 1, b = 2, c = 3 }, 2)\\n-- true\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":13,"path":"source/Dictionary/includes.lua"}},{"name":"joinAsString","desc":"Joins values together as a string, inserting a separator between each.\\n\\nThe default separator is `\\",\\"`.\\n\\n```lua\\nDictionary.joinAsString({ a = 1, b = 2, c = 3 }, \\", \\")\\n-- \\"a=1, b=2, c=3\\"\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"separator","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"static","source":{"line":14,"path":"source/Dictionary/joinAsString.lua"}},{"name":"keys","desc":"Returns a list of keys. Order is undefined.\\n\\n```lua\\nDictionary.keys({ a = 1, b = 2, c = 3 })\\n-- { \\"a\\", \\"b\\", \\"c\\" }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"}],"returns":[{"desc":"","lua_type":"{ Key }\\n"}],"function_type":"static","source":{"line":13,"path":"source/Dictionary/keys.lua"}},{"name":"map","desc":"Returns a new Dictionary with keys and values passed through a `mapper` function.\\n\\nReturning a second value in the mapper function will reassign the key.\\n\\n```lua\\nDictionary.map({ a = 1, b = 2, c = 3 }, function(value, key)\\n\\treturn value * 10, key\\nend)\\n-- { a = 10, b = 20, c = 30 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"mapper","desc":"","lua_type":"(Value, Key) -> (NewValue, NewKey)"}],"returns":[{"desc":"","lua_type":"{ [NewKey]: NewValue? }\\n"}],"function_type":"static","source":{"line":18,"path":"source/Dictionary/map.lua"}},{"name":"max","desc":"Returns the maximum value and key in this dictionary.\\nIf any values are comparatively equivalent, the first one found will be returned. (Order is undefined.)\\n\\nThe `comparator` is used in the same way as `table.sort`. If it is not provided, the default comparator is `>`.\\n\\n```lua\\nDictionary.max({ a = 10, b = 200, c = 30 })\\n-- ( 200, \\"c\\" )\\n\\nDictionary.max({ alice = child, bertram = teen, charlie = adult }, function(personA, personB)\\n\\treturn personA.age > personB.age\\nend)\\n-- ( adult, \\"charlie\\" )\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"comparator","desc":"","lua_type":"((Value, Value) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Value"},{"desc":"","lua_type":"Key?"}],"function_type":"static","source":{"line":22,"path":"source/Dictionary/max.lua"}},{"name":"merge","desc":"Returns a merged result of all given dictionaries.\\n\\nIf `Freeze.None` is a value assigned to a key, it will delete that key from the resulting dictionary.\\n\\n```lua\\nDictionary.merge({ a = 10, b = 20 }, { c = 30 })\\n-- { a = 10, b = 20, c = 30 }\\n\\nDictionary.merge({ a = 10, b = 20 }, { c = 30, d = 40 }, { b = Freeze.None })\\n-- { a = 10, c = 30, d = 40 }\\n```","params":[{"name":"...","desc":"","lua_type":"{ [Key]: Value }"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","source":{"line":19,"path":"source/Dictionary/merge.lua"}},{"name":"mergeIn","desc":"A combination of `updateIn` and `merge`, returning a new dictionary,\\nbut performing a merge at the point arrived by following the key path.\\n\\n```lua\\nlocal dictionary = {\\n\\tpersons = {\\n\\t\\talice = {\\n\\t\\t\\tage = 10,\\n\\t\\t},\\n\\t},\\n}\\n\\nDictionary.mergeIn(dictionary, { \\"persons\\", \\"alice\\" }, { age = 11 })\\n-- { persons = { alice = { age = 11 } } }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [any]: any }"},{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","source":{"line":24,"path":"source/Dictionary/mergeIn.lua"}},{"name":"min","desc":"Returns the minium value and key in this dictionary.\\nIf any values are comparatively equivalent, the first one found will be returned. (Order is undefined.)\\n\\nThe `comparator` is used in the same way as `table.sort`. If it is not provided, the default comparator is `>`.\\n\\n```lua\\nDictionary.min({ a = 10, b = 200, c = 30 })\\n-- ( 10, \\"a\\" )\\n\\nDictionary.min({ alice = child, bertram = teen, charlie = adult }, function(personA, personB)\\n\\treturn personA.age > personB.age\\nend)\\n-- ( child, \\"alice\\" )\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"comparator","desc":"","lua_type":"((Value, Value) -> boolean)?"}],"returns":[{"desc":"","lua_type":"Value"},{"desc":"","lua_type":"Key?"}],"function_type":"static","source":{"line":21,"path":"source/Dictionary/min.lua"}},{"name":"remove","desc":"Returns a Dictionary which excludes the given `keys`.\\n\\n```lua\\nDictionary.remove({ a = 10, b = 20, c = 30 }).remove(\\"c\\")\\n-- { a = 10, b = 20 }\\n\\nDictionary.remove({ a = 10, b = 20, c = 30 }).remove(\\"b\\", \\"c\\")\\n-- { a = 10 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"...","desc":"","lua_type":"Key"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","source":{"line":17,"path":"source/Dictionary/remove.lua"}},{"name":"removeIn","desc":"Returns a new map having removed the value at this `keyPath`.\\nWill create a new path if it does not exist.\\n\\n```lua\\nDictionary.removeIn({ a = { b = { \\"c\\" } } }, { \\"a\\", \\"b\\" })\\n-- { a = {} }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [any]: any }"},{"name":"keyPath","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/removeIn.lua"}},{"name":"removeValue","desc":"Returns a new map having removed the all pairs with the given `value`.\\n\\n```lua\\nDictionary.removeValue({ a = 10, b = 20, c = 30 }, 10)\\n-- { b = 20, c = 30 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","source":{"line":13,"path":"source/Dictionary/removeValue.lua"}},{"name":"set","desc":"Returns a Dictionary which includes `value` at `key`.\\nIf `key` already exists, it will be replaced.\\n\\n```lua\\nDictionary.set({ a = 10, b = 20, c = 30 }, \\"a\\", 100)\\n-- { a = 100, b = 20, c = 30 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"key","desc":"","lua_type":"Key"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/set.lua"}},{"name":"setIn","desc":"Returns a dictionary having set `value` at this `keyPath`.\\nIf any keys in `keyPath` do not exist, a new dictionary will be created at that key.\\n\\n```lua\\nlocal dictionary = {\\n\\tpersons = {\\n\\t\\talice = {\\n\\t\\t\\tage = 10,\\n\\t\\t}\\n\\t},\\n}\\n\\nDictionary.setIn(dictionary, { \\"persons\\", \\"alice\\", \\"age\\" }, 11)\\n-- { persons = { alice = { age = 11 } } }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [any]: any }"},{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","source":{"line":23,"path":"source/Dictionary/setIn.lua"}},{"name":"some","desc":"Returns true if `predicate` returns true for any entry in the dictionary.\\n\\n```lua\\nDictionary.some({ a = 1, b = 2, c = 3 }), function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- true\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"predicate","desc":"","lua_type":"(Value, Key) -> boolean"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":15,"path":"source/Dictionary/some.lua"}},{"name":"update","desc":"Returns a dictionary with the entry at `key` updated to the result of `updater`.\\n\\nIf the entry does not exist, `updater` will be given `notSetValue` or nil.\\n\\n```lua\\nDictionary.update({ a = 10, b = 20, c = 30 }, \\"a\\", function(value)\\n\\treturn value * 100\\nend)\\n-- { a = 1000, b = 20, c = 30 }\\n\\nDictionary.update({ a = 10, b = 20, c = 30 }, \\"d\\", function(value)\\n\\treturn value * 100\\nend, 1)\\n-- { a = 10, b = 20, c = 30, d = 100 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"},{"name":"key","desc":"","lua_type":"Key"},{"name":"updater","desc":"","lua_type":"(Value?) -> Value"},{"name":"notSetValue","desc":"","lua_type":"Value?\\n"}],"returns":[{"desc":"","lua_type":"{ [Key]: Value }\\n"}],"function_type":"static","source":{"line":23,"path":"source/Dictionary/update.lua"}},{"name":"updateIn","desc":"Returns a Dictionary with the entry at `keyPath` updated to the result of `updater`.\\n\\nIf any entry does not exist along `keyPath`, an empty Dictionary will be created in its place.\\n\\nIf the final entry does not exist, `updater` will be given `notSetValue` or nil.\\n\\n```lua\\nlocal dictionary = {\\n\\tpersons = {\\n\\t\\talice = {\\n\\t\\t\\tage = 10,\\n\\t\\t},\\n\\t},\\n}\\n\\nDictionary.updateIn({ \\"persons\\", \\"alice\\", \\"age\\" }, function(value: number)\\n\\tassert(value, \\"will exist\\")\\n\\treturn value + 1\\nend)\\n-- { persons = { alice = { age = 11 } } }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [any]: any }"},{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"updater","desc":"","lua_type":"(any) -> any"},{"name":"notSetValue","desc":"","lua_type":"any?\\n"}],"returns":[{"desc":"","lua_type":"{ [any]: any }\\n"}],"function_type":"static","source":{"line":30,"path":"source/Dictionary/updateIn.lua"}},{"name":"values","desc":"Returns a list of values. Order is undefined.\\n\\n```lua\\nDictionary.values({ a = 1, b = 2, c = 3 })\\n-- { 1, 2, 3 }\\n```","params":[{"name":"dictionary","desc":"","lua_type":"{ [Key]: Value }"}],"returns":[{"desc":"","lua_type":"{ Value }\\n"}],"function_type":"static","source":{"line":13,"path":"source/Dictionary/values.lua"}}],"properties":[],"types":[],"name":"Dictionary","desc":"Handles dictionary-like operations.\\n\\n[`Dictionaries`](../api/Dictionary) are unordered tables with key-value pairs.","source":{"line":9,"path":"source/Dictionary/init.lua"}}')}}]);