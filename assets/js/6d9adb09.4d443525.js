"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[37],{55734:function(e){e.exports=JSON.parse('{"functions":[{"name":"count","desc":"Returns the number of entries that match the predicate.\\nIf the predicate is not given, all entries will be considered a match.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).count()\\n-- 3\\n\\nMap.new({ a = 1, b = 2, c = 3 }).count(function(value, _key)\\n\\treturn value % 2 == 0\\nend)\\n-- 1\\n```","params":[{"name":"predicate","desc":"","lua_type":"((Value, Key) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":20,"path":"source/Map/count.lua"}},{"name":"deleteAll","desc":"Returns a new Map which excludes the provided keys.\\n\\n##### Alias\\n`removeAll`\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).removeAll({ \\"a\\", \\"c\\" })\\n-- Map( \\"b\\" = 2 )\\n```","params":[{"name":"keys","desc":"","lua_type":"...{ Key }"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":17,"path":"source/Map/deleteAll.lua"}},{"name":"emptyMap","desc":"Returns an empty Map.\\n\\n```lua\\nMap.emptyMap()\\n-- Map( )\\n```","params":[],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":13,"path":"source/Map/emptyMap.lua"}},{"name":"equals","desc":"Returns true if both collections have value equality.\\n\\n```lua\\nlocal map1 = List.new({ a = 1, b = 2, c = 3 })\\nlocal map1 = List.new({ a = 1, b = 2, c = 3 })\\n\\nmap1.equals(map1)\\n-- true\\n```","params":[{"name":"other","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":17,"path":"source/Map/equals.lua"}},{"name":"every","desc":"Returns true if `predicate` returns true for all entries in the Iterable.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).every(function(value, key)\\n\\treturn value < 10\\nend)\\n-- true\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":16,"path":"source/Map/every.lua"}},{"name":"filter","desc":"Returns a new Map of only entries for which the `predicate` function returns true.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3, d = 4 }).filter(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- Map( b = 2, d = 4 )\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":16,"path":"source/Map/filter.lua"}},{"name":"filterNot","desc":"Returns a new Map of only entries for which the `predicate` function returns false.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3, d = 4 }).filterNot(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- Map( a = 1, c = 3 )\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":16,"path":"source/Map/filterNot.lua"}},{"name":"find","desc":"Returns the first value for which the `predicate` returns true.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).find(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- 2\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Value"}],"function_type":"static","source":{"line":16,"path":"source/Map/find.lua"}},{"name":"findEntry","desc":"Returns the first [key, value] entry for which the `predicate` returns true.\\n\\n```lua\\nMap.new({ a = 1, b = 2 c = 3, d = 4 }).find(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- { \\"b\\", 2 }\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"{ Key, Value }"}],"function_type":"static","source":{"line":16,"path":"source/Map/findEntry.lua"}},{"name":"findKey","desc":"Returns the first key for which the `predicate` returns true.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).find(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- \\"b\\"\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"Key"}],"function_type":"static","source":{"line":16,"path":"source/Map/findKey.lua"}},{"name":"flatten","desc":"Returns a flattened map.\\n\\n```lua\\nMap.new({\\n\\tfoo = 1,\\n\\tfoobar = {\\n\\t\\tbar = 2,\\n\\t\\tbaz = {\\n\\t\\t\\tetc = 3,\\n\\t\\t},\\n\\t},\\n}).flatten()\\n-- Map( foo = 1, bar = 2, etc = 3 )\\n```","params":[{"name":"depth","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":22,"path":"source/Map/flatten.lua"}},{"name":"flip","desc":"Returns a new map where keys and values are flipped.\\n\\n```lua\\nMap.new({ a = \\"x\\", b = \\"y\\", c = \\"z\\" ).flip()\\n-- Map( x = \\"a\\", y = \\"b\\", z = \\"c\\" )\\n```","params":[],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":13,"path":"source/Map/flip.lua"}},{"name":"forEach","desc":"While the Map is iterated, the `sideEffect` is executed for every entry.\\nIf any call of the `sideEffect` returns `false`, the iteration will stop.\\nReturns the number of entries iterated (including the last iteration which returned false).\\n\\n```lua\\nMap.new({ a = 10, b = 20, c = -10, d = 30 }).forEach(function(value, _key)\\n\\treturn value > 0\\nend)\\n-- 3\\n```","params":[{"name":"sideEffect","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":18,"path":"source/Map/forEach.lua"}},{"name":"get","desc":"Returns the value at the given key, otherwise returns `notSetValue` if the given value is not found.\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).get(\\"a\\", \\"default\\")\\n-- 1\\n\\nMap.new({ a = 1, b = 2, c = 3 }).get(\\"foobar\\", \\"default\\")\\n-- \\"default\\"\\n```","params":[{"name":"key","desc":"","lua_type":"Key"},{"name":"notSetValue","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":17,"path":"source/Map/get.lua"}},{"name":"getIn","desc":"Returns the value if found by following a path of keys, otherwise returns `notSetValue` if the given value is nil.\\n\\n```lua\\nMap.new({\\n\\ta = { b = \\"c\\" },\\n\\tx = { y = \\"z\\" },\\n}).getIn({ \\"a\\", \\"b\\" }, \\"default\\")\\n-- \\"c\\"\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"notSetValue","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Value?"}],"function_type":"static","source":{"line":18,"path":"source/Map/getIn.lua"}},{"name":"has","desc":"Returns true if the key exists within the Map.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).has(\\"b\\")\\n-- true\\n```","params":[{"name":"key","desc":"","lua_type":"Key"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":14,"path":"source/Map/has.lua"}},{"name":"hasIn","desc":"Returns true if the value is found by following a path of keys.\\n\\n```lua\\nMap.new({\\n\\ta = { b = \\"c\\" },\\n\\tx = { y = \\"z\\" },\\n}).hasIn({ \\"a\\", \\"b\\" })\\n-- true\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":17,"path":"source/Map/hasIn.lua"}},{"name":"includes","desc":"Returns true if the value is found within the Map.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).includes(2)\\n-- true\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":14,"path":"source/Map/includes.lua"}},{"name":"isEmpty","desc":"Returns true if the map is empty.\\n\\n```lua\\nMap.new({}).isEmpty()\\n-- true\\n```","params":[],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":13,"path":"source/Map/isEmpty.lua"}},{"name":"joinAsString","desc":"Joins values together as a string, inserting a separator between each.\\n\\nThe default separator is `\\",\\"`.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).joinAsString(\\", \\")\\n-- \\"a=1, b=2, c=3\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"static","source":{"line":15,"path":"source/Map/joinAsString.lua"}},{"name":"keys","desc":"Returns a list of keys.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).keys()\\n-- Map( \\"a\\", \\"b\\", \\"c\\" )\\n```","params":[],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":13,"path":"source/Map/keys.lua"}},{"name":"new","desc":"Constructs a new Map object with the given table.\\n\\nHas a callable shorthand variant:\\n\\n```lua\\nlocal myMap1 = Map.new({ a = 1, b = 2, c = 3 })\\nlocal myMap2 = Map({ a = 1, b = 2, c = 3 })\\n```","params":[{"name":"collection","desc":"","lua_type":"{ any }?"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","errors":[{"lua_type":"\\"Map: Expected table\\"","desc":"Raised when given an invalid argument for collection. Make sure you only provide tables or nil."}],"source":{"line":46,"path":"source/Map/Map.lua"}},{"name":"toLuau","desc":"Returns a show Luau table representation of the List.\\n\\n```lua\\nMap({ a = 1, b = 2, c = 3 }).toLuau()\\n-- { 1, 2, 3 }\\n```","params":[],"returns":[{"desc":"","lua_type":"{ Key: Value }"}],"function_type":"static","source":{"line":71,"path":"source/Map/Map.lua"}},{"name":"toArray","desc":"Returns a shallow Luau table representation of the Map, coercing it to an array.\\n\\n```lua\\nMap({ a = 1, b = 2, c= 3 }).toArray()\\n-- { }\\n```","params":[],"returns":[{"desc":"","lua_type":"{ Value }"}],"function_type":"static","source":{"line":84,"path":"source/Map/Map.lua"}},{"name":"mapEntries","desc":"Returns a new Map with entries ({key, value}) passed through a `mapper` function.\\n\\nIf `mapper` returns nil, then the entry will be filtered.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).mapEntries(function(entry)\\n\\treturn { string.upper(entry[1]), entry[2] * 2 }\\nend)\\n-- Map( A = 2, B = 4, C = 6 )\\n```","params":[{"name":"mapper","desc":"","lua_type":"({ Value, Key }) -> ({ Value, Key }?)"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":18,"path":"source/Map/mapEntries.lua"}},{"name":"map","desc":"Returns a new Map with keys and values passed through a `mapper` function.\\n\\nReturning a second value in the mapper function will reassign the key.\\n\\nIf `mapper` returns nil for value, the entry will be filtered.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).map(function(value, _key)\\n\\treturn value * 10\\nend)\\n-- Map( a = 10, b = 20, c = 30 )\\n```","params":[{"name":"mapper","desc":"","lua_type":"(Value, Key) -> (Value?, Key?)"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":20,"path":"source/Map/mapFn.lua"}},{"name":"mapKeys","desc":"Returns a new Map with keys and values passed through a `mapper` function.\\n\\nReturning a second value in the mapper function will reassign the index.\\n\\nIf `mapper` returns nil, the entry will be filtered.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).map(function(key)\\n\\treturn string.upper(key)\\nend)\\n-- Map( A = 1, B = 2, C = 3 )\\n```","params":[{"name":"mapper","desc":"","lua_type":"(Key, Value) -> (Key?)"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":20,"path":"source/Map/mapKeys.lua"}},{"name":"max","desc":"Returns the maximum value in this map.\\nIf any values are comparatively equivalent, the first one found will be returned.\\n\\nThe `comparator` is used in the same way as `table.sort`. If it is not provided, the default comparator is `>`.\\n\\n```lua\\nMap.new({ a = 10, b = 200, c = 30 }).max()\\n-- 200\\n\\nMap.new({ alice = child, bertram = teen, charlie = adult }).max(function(personA, personB)\\n\\treturn personA.age > personB.age\\nend)\\n-- adult\\n```","params":[{"name":"comparator","desc":"","lua_type":"((Value, Value) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"Value"}],"function_type":"static","source":{"line":22,"path":"source/Map/max.lua"}},{"name":"merge","desc":"Returns a merged result of all given maps.\\n\\nIf `Freeze.None` is a value assigned to a key, it will delete that key from the resulting map.\\n\\n##### Alias\\n`join`\\n\\n```lua\\nMap.new({ a = 10, b = 20 }).merge({ c = 30 })\\n-- Map( a = 10, b = 20, c = 30 )\\n\\nMap.new({ a = 10, b = 20 }).merge({ c = 30, d = 40 }, { b = Freeze.None })\\n-- Map( a = 10, c = 30, d = 40 )\\n```","params":[{"name":"maps","desc":"","lua_type":"...Map"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":22,"path":"source/Map/merge.lua"}},{"name":"mergeIn","desc":"A combination of `updateIn` and `merge`, returning a new Map,\\nbut performing a merge at the point arrived by following the key path.\\n\\n```lua\\nMap.new({\\n\\tpersons = {\\n\\t\\talice = {\\n\\t\\t\\tage = 10,\\n\\t\\t},\\n\\t\\tbertram = {\\n\\t\\t\\tage = 16,\\n\\t\\t},\\n\\t},\\n}).mergeIn({ \\"persons\\", \\"alice\\" }, { age = 11 })\\n-- Map( persons = { alice = { age = 11 }, bertram = { age = 16 }, } )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"maps","desc":"","lua_type":"...Map"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":25,"path":"source/Map/mergeIn.lua"}},{"name":"min","desc":"Returns the minium value in this map.\\nIf any values are comparatively equivalent, the first one found will be returned.\\n\\nThe `comparator` is used in the same way as `table.sort`. If it is not provided, the default comparator is `>`.\\n\\n```lua\\nMap.new({ a = 10, b = 200, c = 30 }).min()\\n-- 10\\n\\nMap.new({ alice = child, bertram = teen, charlie = adult }).min(function(personA, personB)\\n\\treturn personA.age > personB.age\\nend)\\n-- child\\n```","params":[{"name":"comparator","desc":"","lua_type":"((Value, Value) -> (boolean))?"}],"returns":[{"desc":"","lua_type":"Value"}],"function_type":"static","source":{"line":22,"path":"source/Map/min.lua"}},{"name":"of","desc":"Constructs a new Map object with the given entries.\\n\\n```lua\\nlocal myMap = Map.of({ \\"a\\", 10 }, { \\"b\\", 20 }, { \\"c\\", 30 })\\n-- Map ( a = 10, b = 20, c = 30 )\\n```","params":[{"name":"values","desc":"","lua_type":"...{ Key: Value}"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":14,"path":"source/Map/of.lua"}},{"name":"remove","desc":"Returns a new map which excludes this `key`.\\n\\n```lua\\nMap.new({ a = 10, b = 20, c = 30 }).remove(\\"c\\")\\n-- Map( a = 10, b = 20 )\\n```","params":[{"name":"key","desc":"","lua_type":"Key"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":14,"path":"source/Map/remove.lua"}},{"name":"removeIn","desc":"Returns a new map having removed the value at this `keyPath`.\\n\\n```lua\\nMap.new({ a = { b = { c = \\"d\\" } } }).removeIn({ \\"a\\", \\"b\\" })\\n-- Map( a = {} )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":14,"path":"source/Map/removeIn.lua"}},{"name":"removeValue","desc":"Returns a new map having removed the first entry with the given `value`.\\n\\n```lua\\nMap.new({ a = 10, b = 20, c = 30 }).removeValue(10)\\n-- Map( b = 20, c = 30 )\\n```","params":[{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":14,"path":"source/Map/removeValue.lua"}},{"name":"set","desc":"Returns a new map which includes `value` at `key`.\\nIf `key` already exists, it will be replaced.\\n\\n```lua\\nMap.new({ a = 10, b = 20, c = 30 }).set(\\"a\\", 100)\\n-- Map( a = 100, b = 20, c = 30 )\\n```","params":[{"name":"key","desc":"","lua_type":"Key"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":16,"path":"source/Map/set.lua"}},{"name":"setIn","desc":"Returns a new map having set `value` at this `keyPath`.\\nIf any keys in `keyPath` do not exist, a new map will be created at that key.\\n\\n```lua\\nMap.new({\\n\\tpersons = {\\n\\t\\talice = {\\n\\t\\t\\tage = 10,\\n\\t\\t},\\n\\t\\tbertram = {\\n\\t\\t\\tage = 16,\\n\\t\\t},\\n\\t},\\n}).setIn({ \\"persons\\", \\"alice\\", \\"age\\" }, 11)\\n-- Map( persons = { alice = { age = 11 }, bertram = { age = 16 }, } )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"value","desc":"","lua_type":"Value"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":25,"path":"source/Map/setIn.lua"}},{"name":"some","desc":"Returns true if `predicate` returns true for any entry in the map.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).some(function(value, key)\\n\\treturn value % 2 == 0\\nend)\\n-- true\\n```","params":[{"name":"predicate","desc":"","lua_type":"(Value, Key) -> (boolean)"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":16,"path":"source/Map/some.lua"}},{"name":"toList","desc":"Converts this map to a List.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).toList()\\n-- List( 1, 2, 3 )\\n```","params":[],"returns":[{"desc":"","lua_type":"List"}],"function_type":"static","source":{"line":13,"path":"source/Map/toList.lua"}},{"name":"update","desc":"Returns a new map with the entry at `key` updated to the result of `updater`.\\n\\nIf the entry does not exist, `updater` will be given `notSetValue` or nil.\\n\\n```lua\\nMap.new({ a = 10, b = 20, c = 30 }).update(\\"a\\", function(value)\\n\\treturn value * 100\\nend)\\n-- Map( a = 10000, b = 20, c = 30 )\\n\\nMap.new({ a = 10, b = 20, c = 30 }).update(\\"d\\", function(value)\\n\\treturn value * 100\\nend, 1)\\n-- Map( a = 10000, b = 20, c = 30, d = 100 )\\n```","params":[{"name":"key","desc":"","lua_type":"Key"},{"name":"updater","desc":"","lua_type":"(Value?, Key?) -> (Value)"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":25,"path":"source/Map/update.lua"}},{"name":"updateIn","desc":"Returns a new map with the entry at `keyPath` updated to the result of `updater`.\\n\\nIf any entry does not exist along `keyPath`, an empty map will be created in its place.\\nIf the final entry does not exist, `updater` will be given `notSetValue` or nil.\\n\\n```lua\\nMap.new({\\n\\tpersons = {\\n\\t\\talice = {\\n\\t\\t\\tage = 10,\\n\\t\\t},\\n\\t\\tbertram = {\\n\\t\\t\\tage = 16,\\n\\t\\t},\\n\\t},\\n}).updateIn({ \\"persons\\", \\"alice\\", \\"age\\" }, function(value)\\n\\treturn value + 1\\nend)\\n-- Map( persons = { alice = { age = 11 }, bertram = { age = 16 }, } )\\n```","params":[{"name":"keyPath","desc":"","lua_type":"{ any }"},{"name":"updater","desc":"","lua_type":"(Value?, Key?) -> (Value)"},{"name":"notSetValue","desc":"","lua_type":"Value?"}],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":30,"path":"source/Map/updateIn.lua"}},{"name":"values","desc":"Returns a list of values.\\n\\n```lua\\nMap.new({ a = 1, b = 2, c = 3 }).values()\\n-- Map( 1, 2, 3 )\\n```","params":[],"returns":[{"desc":"","lua_type":"Map"}],"function_type":"static","source":{"line":13,"path":"source/Map/values.lua"}}],"properties":[],"types":[],"name":"Map","desc":"Handles dictionary-like operations.","source":{"line":6,"path":"source/Map/Map.lua"}}')}}]);