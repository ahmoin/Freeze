"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[885],{8095:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=["components"],i={sidebar_position:3},l="Demonstration",u={unversionedId:"Demonstration",id:"Demonstration",isDocsHomePage:!1,title:"Demonstration",description:"Handling immutable data structures can be done either functionally or as a class.",source:"@site/docs/Demonstration.md",sourceDirName:".",slug:"/Demonstration",permalink:"/Freeze/docs/Demonstration",editUrl:"https://github.com/benbrimeyer/Freeze/edit/master/docs/Demonstration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"How does immutability help?",permalink:"/Freeze/docs/WhyImmutable"},next:{title:"Migrating From Llama",permalink:"/Freeze/docs/MigratingFromLlama"}},c=[{value:"Functional",id:"functional",children:[],level:2},{value:"Class",id:"class",children:[],level:2},{value:"API Reference",id:"api-reference",children:[],level:2}],m={toc:c};function p(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"demonstration"},"Demonstration"),(0,o.kt)("p",null,"Handling immutable data structures can be done either functionally or as a class."),(0,o.kt)("h2",{id:"functional"},"Functional"),(0,o.kt)("p",null,"Other popular Lua implementations",(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," of immutable data structures typically offer this functional approach:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local oldList = { "a", "b", "c" }\nlocal newList = Freeze.List.set(oldList, 1, "value")\n')),(0,o.kt)("p",null,"This comes with a few benefits, such as knowing we will always get a Luau ",(0,o.kt)("inlineCode",{parentName:"p"},"table")," type as a result."),(0,o.kt)("h2",{id:"class"},"Class"),(0,o.kt)("p",null,"Freeze also offers a class-based approach to writing immutable data structures.",(0,o.kt)("sup",{parentName:"p",id:"fnref-2"},(0,o.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local oldList = Freeze.List({ "a", "b", "c" })\nlocal newList = oldList.set(1, "value").toLuau()\n')),(0,o.kt)("p",null,"This makes it easy to chain together operations to create a new data structure."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local oldList = Freeze.List({ "a", "b", "c", "d" })\nlocal newList = oldList.map(string.upper).reverse().remove(1)\n-- List( "C", "B", "A" )\n')),(0,o.kt)("p",null,"This does come with a caveat. Most Luau code written may expect a Luau table data type without any class decorations. If your code is expecting a Luau table data type, be sure to convert your result via ",(0,o.kt)("inlineCode",{parentName:"p"},"toLuau"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"local luauTable: { string } = newList.toLuau()\n")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("p",null,"Check out the ",(0,o.kt)("a",{parentName:"p",href:"../api"},"API Reference")," to see what else Freeze is capable of!"),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1"},"Such as ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/freddylist/llama"},"Llama"),".",(0,o.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,o.kt)("li",{parentName:"ol",id:"fn-2"},(0,o.kt)("a",{parentName:"li",href:"https://immutable-js.com/"},"Immutable.js")," was a heavy inspiration.",(0,o.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")))))}p.isMDXComponent=!0}}]);